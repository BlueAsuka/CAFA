specialized_hours = solver.IntVar(0, solver.infinity(), 'specialized_hours')
common_hours = solver.IntVar(0, solver.infinity(), 'common_hours')
solver.Add(60 * specialized_hours + 40 * common_hours >= 10000)
solver.Add(specialized_hours >= (1/3) * (specialized_hours + common_hours))
objective = solver.Objective()
objective.SetCoefficient(specialized_hours, 100.0)
objective.SetCoefficient(common_hours, 72.0)
objective.SetMinimization()
wired = solver.IntVar(0, 100, 'wired')
wired = solver.IntVar(0, 170, 'wireless')
solver.Add(wired <= 100)
solver.Add(wireless <= 170)
solver.Add(wired + wireless <= 150)
objective = solver.Objective()
objective.SetCoefficient(wired, 50.0)
objective.SetCoefficient(wireless, 20.0)
objective.SetMaximization()
tractors = solver.IntVar(0, solver.infinity(), 'tractors')
cars = solver.IntVar(0, solver.infinity(), 'cars')
solver.Add(40 * tractors + 20 * cars >= 500)
solver.Add(cars >= 2 * tractors)
objective = solver.Objective()
objective.SetCoefficient(tractors, 1.0)
objective.SetCoefficient(cars, 1.0)
objective.SetMinimization()
condos = solver.IntVar(0, 760000, 'condos')
detached_houses = solver.IntVar(0, 760000, 'detached_houses')
solver.Add(condos + detached_houses <= 760000)
solver.Add(condos >= 0.2 * (condos + detached_houses))
solver.Add(detached_houses >= 20000)
objective = solver.Objective()
objective.SetCoefficient(condos, 0.5)
objective.SetCoefficient(detached_houses, 1.0)
objective.SetMaximization()
long_desks = solver.IntVar(0, solver.infinity(), 'long_desks')
short_desks = solver.IntVar(0, solver.infinity(), 'short_desks')
solver.Add(300 * long_desks + 100 * short_desks <= 2000)
solver.Add(10 * long_desks + 4 * short_desks <= 200)
objective = solver.Objective()
objective.SetCoefficient(long_desks, 6.0)
objective.SetCoefficient(short_desks, 2.0)
objective.SetMaximization()
salmon = solver.IntVar(0, solver.infinity(), 'salmon')
eggs = solver.IntVar(0, solver.infinity(), 'eggs')
solver.Add(300 * salmon + 200 * eggs >= 2000)
solver.Add(15 * salmon + 8 * eggs >= 90)
solver.Add(eggs <= 0.4 * (salmon + eggs))
solver.Add(80 * salmon + 20 * eggs)
buses = solver.IntVar(0, solver.infinity(), 'buses')
personal_cars = solver.IntVar(0, solver.infinity(), 'personal_cars')
solver.Add(9 * buses + 4 * personal_cars >= 100)
solver.Add(buses > personal_cars)
solver.Add(personal_cars >= 5)
objective = solver.Objective()
objective.SetCoefficient(buses, 1.0)
objective.SetCoefficient(personal_cars, 1.0)
objective.SetMinimization()
basketball = solver.IntVar(0, 100000, 'basketball')
horse_race = solver.IntVar(0, 100000, 'horse_race')
soccer = solver.IntVar(0, 100000, 'soccer')
solver.Add(basketball + horse_race + soccer <= 100000)
solver.Add(0.5 * basketball + 0.25 * horse_race + 0.1 * soccer <= 0.3 * 100000)
objective = solver.Objective()
objective.SetCoefficient(basketball, 1.2)
objective.SetCoefficient(horse_race, 0.5)
objective.SetCoefficient(soccer, 0.1)
objective.SetMaximization()
pop = solver.IntVar(0, solver.infinity(), 'pop')
rnb = solver.IntVar(0, solver.infinity(), 'rnb')
solver.Add(100 * pop + 240 * rnb >= 10000)
solver.Add(2 * pop + 4 * rnb <= 180)
solver.Add(rnb <= 0.4 * (pop + rnb))
objective = solver.Objective()
objective.SetCoefficient(pop, 1.0)
objective.SetCoefficient(rnb, 1.0)
objective.SetMinimization()
regular_trips = solver.IntVar(0, 20, 'regular_trips')
speed_trips = solver.IntVar(0, solver.infinity(), 'speed_trips')
solver.Add(20 * regular_trips + 30 * speed_trips >= 1000)
solver.Add(regular_trips <= 20)
solver.Add(speed_trips >= 0.5 * (regular_trips + speed_trips))
objective = solver.Objective()
objective.SetCoefficient(regular_trips, 10.0)
objective.SetCoefficient(speed_trips, 20.0)
objective.SetMinimization()
refrigerators = solver.IntVar(0, solver.infinity(), 'refrigerators')
stoves = solver.IntVar(0, solver.infinity(), 'stoves')
solver.Add(60 * refrigerators + 45 * stoves <= 20000)
solver.Add(20 * refrigerators + 25 * stoves <= 13000)
objective = solver.Objective()
objective.SetCoefficient(refrigerators, 400.0)
objective.SetCoefficient(stoves, 260.0)
objective.SetMaximization()
premium = solver.IntVar(0, solver.infinity(), 'premium')
regular = solver.IntVar(0, solver.infinity(), 'regular')
solver.Add(30 * premium + 20 * regular >= 200)
solver.Add(4 * premium + 3 * regular <= 35)
solver.Add(regular < premium)
objective = solver.Objective()
objective.SetCoefficient(premium, 1.0)
objective.SetCoefficient(regular, 1.0)
objective.SetMinimization()
telecom = solver.IntVar(0, 70000, 'telecom')
healthcare = solver.IntVar(0, solver.infinity(), 'healthcare')
solver.Add(telecom + healthcare <= 100000)
solver.Add(telecom >= 3 * healthcare)
objective = solver.Objective()
objective.SetCoefficient(telecom, 0.03)
objective.SetCoefficient(healthcare, 0.01)
objective.SetMaximization()
phones = solver.IntVar(0, solver.infinity(), 'phones')
laptops = solver.IntVar(0, solver.infinity(), 'laptops')
solver.Add(phones + 4 * laptops <= 400)
solver.Add(laptops >= 0.8 * (phones + laptops))
solver.Add(400 * phones + 100 * laptops <= 6000)
objective = solver.Objective()
objective.SetCoefficient(phones, 120.0)
objective.SetCoefficient(laptops, 40.0)
objective.SetMaximization()
vans = solver.IntVar(0, solver.infinity(), 'vans')
cars = solver.IntVar(0, solver.infinity(), 'cars')
solver.Add(6 * vans + 3 * cars >= 200)
solver.Add(vans <= 0.3 * (vans + cars))
objective = solver.Objective()
objective.SetCoefficient(cars, 1.0)
objective.SetMinimization()
x1 = solver.IntVar(0, solver.infinity(), 'x1')
x2 = solver.IntVar(0, solver.infinity(), 'x2')
solver.Add(x1 <= 50)
solver.Add(x2 <= 40)
solver.Add(x1 + x2 <= 70)
objective = solver.Objective()
objective.SetCoefficient(x1, 2.5)
objective.SetCoefficient(x2, 3.55)
objective.SetMaximization()
trains = solver.IntVar(0, solver.infinity(), 'trains')
planes = solver.IntVar(0, solver.infinity(), 'planes')
solver.Add(3 * trains + 4 * planes <= 120)
solver.Add(3 * trains + 2 * planes <= 90)
objective = solver.Objective()
objective.SetCoefficient(trains, 8.0)
objective.SetCoefficient(planes, 10.0)
objective.SetMaximization()
low_power = solver.IntVar(0, 30, 'low_power')
high_power = solver.IntVar(7, solver.infinity(), 'high_power')
solver.Add(12 * low_power + 17 * high_power >= 250)
solver.Add(150 * low_power + 250 * high_power <= 3400)
solver.Add(low_power <= 0.3 * (low_power + high_power))
objective = solver.Objective()
objective.SetCoefficient(low_power, 1.0)
objective.SetCoefficient(high_power, 1.0)
objective.SetMinimization()
oranges = solver.IntVar(0, solver.infinity(), 'oranges')
grapefruits = solver.IntVar(0, solver.infinity(), 'grapefruits')
solver.Add(5 * oranges + 7 * grapefruits >= 80)
solver.Add(3 * oranges + 5 * grapefruits >= 70)
solver.Add(oranges >= 2 * grapefruits)
objective = solver.Objective()
objective.SetCoefficient(oranges, 5.0)
objective.SetCoefficient(grapefruits, 6.0)
objective.SetMinimization()
small_boxes = solver.IntVar(0, solver.infinity(), 'small_boxes')
large_boxes = solver.IntVar(0, solver.infinity(), 'large_boxes')
solver.Add(small_boxes >= 3 * large_boxes)
solver.Add(large_boxes >= 5)
solver.Add(25 * small_boxes + 45 * large_boxes >= 750)
objective = solver.Objective()
objective.SetCoefficient(small_boxes, 1.0)
objective.SetCoefficient(large_boxes, 1.0)
objective.SetMinimization()
smoothies = solver.IntVar(0, solver.infinity(), 'smoothies')
protein_bars = solver.IntVar(0, solver.infinity(), 'protein_bars')
solver.Add(2 * smoothies + 7 * protein_bars >= 32)
solver.Add(300 * smoothies + 250 * protein_bars <= 2000)
solver.Add(protein_bars == 2 * smoothies)
objective = solver.Objective()
objective.SetCoefficient(smoothies, 2.0)
objective.SetCoefficient(protein_bars, 7.0)
objective.SetMaximization()
pigeons = solver.IntVar(20, solver.infinity(), 'pigeons')
owls = solver.IntVar(0, solver.infinity(), 'owls')
solver.Add(3 * pigeons + 5 * owls <= 1000)
solver.Add(owls <= 0.4 * (pigeons + owls))
letters_sent = 2 * pigeons + 5 * owls
objective = solver.Objective()
objective.SetCoefficient(pigeons, 2.0)
objective.SetCoefficient(owls, 5.0)
objective.SetMaximization()
long_cables = solver.IntVar(10, solver.infinity(), 'long_cables')
short_cables = solver.IntVar(0, solver.infinity(), 'short_cables')
solver.Add(10 * long_cables + 7 * short_cables <= 1000)
solver.Add(short_cables >= 5 * long_cables)
objective = solver.Objective()
objective.SetCoefficient(long_cables, 12.0)
objective.SetCoefficient(short_cables, 5.0)
objective.SetMaximization()
cows = solver.IntVar(0, solver.infinity(), 'cows')
elephants = solver.IntVar(0, solver.infinity(), 'elephants')
solver.Add(20 * cows + 50 * elephants >= 1000)
solver.Add(elephants <= cows)
solver.Add(cows <= 2 * elephants)
objective = solver.Objective()
objective.SetCoefficient(cows, 1.0)
objective.SetCoefficient(elephants, 1.0)
objective.SetMinimization()
coconut_oil = solver.IntVar(300, 550, 'coconut_oil')
lavender = solver.IntVar(0, 550, 'lavender')
solver.Add(coconut_oil + lavender <= 550)
solver.Add(coconut_oil <= 3 * lavender)
objective = solver.Objective()
objective.SetCoefficient(coconut_oil, 0.7)
objective.SetCoefficient(lavender, 0.9)
objective.SetMinimization()
A = solver.IntVar(0, solver.infinity(), 'A')
B = solver.IntVar(0, solver.infinity(), 'B')
solver.Add(3 * A + 5 * B <= 500)
solver.Add(2 * A + 3 * B <= 300)
objective = solver.Objective()
objective.SetCoefficient(A, 5.0)
objective.SetCoefficient(B, 7.0)
objective.SetMaximization()
hot_air_balloon = solver.IntVar(0, 10, 'hot_air_balloon')
gondola_lift = solver.IntVar(0, solver.infinity(), 'gondola_lift')
solver.Add(4 * hot_air_balloon + 6 * gondola_lift >= 70)
solver.Add(hot_air_balloon <= 10)
objective = solver.Objective()
objective.SetCoefficient(hot_air_balloon, 10.0)
objective.SetCoefficient(gondola_lift, 15.0)
objective.SetMinimization()
blueberries = solver.IntVar(0, solver.infinity(), 'blueberries')
strawberries = solver.IntVar(0, solver.infinity(), 'strawberries')
solver.Add(3 * blueberries + 1 * strawberries >= 90)
solver.Add(5 * blueberries + 7 * strawberries >= 100)
solver.Add(strawberries >= 3 * blueberries)
objective = solver.Objective()
objective.SetCoefficient(blueberries, 5.0)
objective.SetCoefficient(strawberries, 7.0)
objective.SetMinimization()
A = solver.IntVar(0, solver.infinity(), 'A')
B = solver.IntVar(0, solver.infinity(), 'B')
solver.Add(10 * A + 7 * B >= 30)
solver.Add(8 * A + 15 * B >= 50)
objective = solver.Objective()
objective.SetCoefficient(A, 100.0)
objective.SetCoefficient(B, 80.0)
objective.SetMinimization()
medium_carts = solver.IntVar(5, solver.infinity(), 'medium_carts')
large_carts = solver.IntVar(5, solver.infinity(), 'large_carts')
solver.Add(2 * medium_carts + 4 * large_carts <= 60)
solver.Add(medium_carts == 3 * large_carts)
objective = solver.Objective()
objective.SetCoefficient(medium_carts, 30.0)
objective.SetCoefficient(large_carts, 70.0)
objective.SetMaximization()
demonstration1 = solver.IntVar(0, solver.infinity(), 'demonstration1')
demonstration2 = solver.IntVar(0, solver.infinity(), 'demonstration2')
solver.Add(10 * demonstration1 + 12 * demonstration2 <= 120)
solver.Add(20 * demonstration1 + 15 * demonstration2 <= 100)
solver.Add(5 * demonstration1 + 3 * demonstration2 <= 50)
objective = solver.Objective()
objective.SetCoefficient(demonstration1, 25.0)
objective.SetCoefficient(demonstration2, 18.0)
objective.SetMaximization()
small_suitcases = solver.IntVar(0, 70, 'small_suitcases')
large_suitcases = solver.IntVar(15, 50, 'large_suitcases')
solver.Add(small_suitcases <= 70)
solver.Add(large_suitcases <= 50)
solver.Add(small_suitcases >= 2 * large_suitcases)
solver.Add(small_suitcases + large_suitcases <= 70)
objective = solver.Objective()
objective.SetCoefficient(small_suitcases, 50.0)
objective.SetCoefficient(large_suitcases, 80.0)
objective.SetMaximization()
hardwood = solver.IntVar(0, 50000, 'hardwood')
viny = solver.IntVar(0, 30000, 'viny')
solver.Add(hardwood >= 20000)
solver.Add(viny >= 10000)
solver.Add(hardwood + viny >= 60000)
objective = solver.Objective()
objective.SetCoefficient(hardwood, 2.5)
objective.SetCoefficient(viny, 3.0)
objective.SetMaximization()
syrup1 = solver.IntVar(0, solver.infinity(), 'syrup1')
syrup2 = solver.IntVar(0, solver.infinity(), 'syrup2')
solver.Add(0.5 * syrup1 + 0.2 * syrup2 <= 5)
solver.Add(0.4 * syrup1 + 0.5 * syrup2 >= 4)
objective = solver.Objective()
objective.SetCoefficient(syrup1, 0.5)
objective.SetCoefficient(syrup2, 0.3)
objective.SetMinimization()
densely_seated = solver.IntVar(0, solver.infinity(), 'densely_seated')
loosely_seated = solver.IntVar(5, solver.infinity(), 'loosely_seated')
solver.Add(45 * densely_seated + 20 * loosely_seated >= 1000)
solver.Add(30 * densely_seated + 22 * loosely_seated <= 940)
objective = solver.Objective()
objective.SetCoefficient(densely_seated, 1.0)
objective.SetCoefficient(loosely_seated, 1.0)
objective.SetMinimization()
counter_top = solver.IntVar(0, solver.infinity(), 'counter_top')
fridge = solver.IntVar(0, solver.infinity(), 'fridge')
solver.Add(80 * counter_top + 150 * fridge >= 1000)
solver.Add(50 * counter_top + 70 * fridge <= 500)
objective = solver.Objective()
objective.SetCoefficient(counter_top, 1.0)
objective.SetCoefficient(fridge, 1.0)
objective.SetMinimization()
type_II = solver.IntVar(0, solver.infinity(), 'type_II')
hospital_van = solver.IntVar(0, solver.infinity(), 'hospital_van')
solver.Add(20 * type_II + 15 * hospital_van >= 320)
solver.Add(hospital_van <= 0.6 * (type_II + hospital_van))
objective = solver.Objective()
objective.SetCoefficient(type_II, 820.0)
objective.SetCoefficient(hospital_van, 550.0)
objective.SetMinimization()
table1 = solver.IntVar(0, solver.infinity(), 'table1')
table2 = solver.IntVar(0, solver.infinity(), 'table2')
solver.Add(3 * table1 + 8 * table2 <= 100)
solver.Add(5 * table1 + 6 * table2 <= 90)
solver.Add(2 * table1 + 4 * table2 <= 30)
objective = solver.Objective()
objective.SetCoefficient(table1, 4.0)
objective.SetCoefficient(table2, 5.0)
objective.SetMaximization()
carrots = solver.IntVar(300, 500, 'carrots')
cucumbers = solver.IntVar(0, solver.infinity(), 'cucumbers')
solver.Add(0.30 * carrots + 0.50 * cucumbers <= 500)
solver.Add(cucumbers <= carrots / 3)
objective = solver.Objective()
objective.SetCoefficient(carrots, 0.75)
objective.SetCoefficient(cucumbers, 0.80)
objective.SetMaximization()
daytime_pills = solver.IntVar(0, solver.infinity(), 'daytime_pills')
nighttime_pills = solver.IntVar(0, solver.infinity(), 'nighttime_pills')
solver.Add(6 * daytime_pills + 5 * nighttime_pills <= 800)
solver.Add(2 * daytime_pills + 5 * nighttime_pills >= 200)
solver.Add(daytime_pills >= 0.4 * (daytime_pills + nighttime_pills))
objective = solver.Objective()
objective.SetCoefficient(daytime_pills, 2.0)
objective.SetCoefficient(nighttime_pills, 5.0)
objective.SetMinimization()
large_pizzas = solver.IntVar(0, solver.infinity(), 'large_pizzas')
medium_pizzas = solver.IntVar(0, solver.infinity(), 'medium_pizzas')
solver.Add(12 * large_pizzas + 8 * medium_pizzas >= 10000)
solver.Add(5 * large_pizzas + 4 * medium_pizzas >= 4400)
solver.Add(medium_pizzas >= 200)
solver.Add(large_pizzas >= 2 * medium_pizzas)
objective = solver.Objective()
objective.SetCoefficient(large_pizzas, 12.0)
objective.SetCoefficient(medium_pizzas, 8.0)
objective.SetMinimization()
trains = solver.IntVar(0, solver.infinity(), 'trains')
trams = solver.IntVar(0, solver.infinity(), 'trams')
solver.Add(120 * trains + 30 * trams >= 600)
solver.Add(trams >= 2 * trains)
objective = solver.Objective()
objective.SetCoefficient(trains, 1.0)
objective.SetCoefficient(trams, 1.0)
objective.SetMinimization()
small_teams = solver.IntVar(0, solver.infinity(), 'small_teams')
large_teams = solver.IntVar(0, solver.infinity(), 'large_teams')
solver.Add(3 * small_teams + 5 * large_teams <= 150)
solver.Add(small_teams >= 3 * large_teams)
solver.Add(large_teams >= 6)
solver.Add(small_teams >= 10)
objective = solver.Objective()
objective.SetCoefficient(small_teams, 50.0)
objective.SetCoefficient(large_teams, 80.0)
objective.SetMaximization()
first_dose = solver.IntVar(0, solver.infinity(), 'first_dose')
second_dose = solver.IntVar(0, solver.infinity(), 'second_dose')
solver.Add(30 * first_dose + 65 * second_dose <= 35000)
solver.Add(first_dose > second_dose)
solver.Add(second_dose >= 40)
objective = solver.Objective()
objective.SetCoefficient(first_dose, 20.0)
objective.SetCoefficient(second_dose, 60.0)
objective.SetMinimization()
full_time_workers = solver.IntVar(0, solver.infinity(), 'full_time_workers')
part_time_workers = solver.IntVar(0, solver.infinity(), 'part_time_workers')
solver.Add(8 * full_time_workers + 4 * part_time_workers >= 500)
solver.Add(300 * full_time_workers + 100 * part_time_workers <= 15000)
objective = solver.Objective()
objective.SetCoefficient(full_time_workers, 1.0)
objective.SetCoefficient(part_time_workers, 1.0)
objective.SetMinimization()
A = solver.IntVar(0, solver.infinity(), 'A')
B = solver.IntVar(0, solver.infinity(), 'B')
solver.Add(8 * A + 15 * B >= 150)
solver.Add(6 * A + 2 * B >= 300)
solver.Add(10 * A + 20 * B <= 400)
objective = solver.Objective()
objective.SetCoefficient(A, 4.0)
objective.SetCoefficient(B, 12.0)
objective.SetMinimization()
heap_leaching = solver.IntVar(0, 100, 'heap_leaching')
vatt_leaching = solver.IntVar(0, 100, 'vat_leaching')
solver.Add(heap_leaching + vatt_leaching <= 100)
solver.Add(10 * heap_leaching + 20 * vatt_leaching <= 100)
solver.Add(8 * heap_leaching + 17 * vatt_leaching <= 90)
objective = solver.Objective()
objective.SetCoefficient(heap_leaching, 3.0)
objective.SetCoefficient(vatt_leaching, 5.0)
objective.SetMaximization()
windrower = solver.IntVar(0, 200, 'windrower')
hay_harvester = solver.IntVar(0, 200, 'hay_harvester')
solver.Add(windrower + hay_harvester <= 200)
solver.Add(2 * windrower + 1 * hay_harvester <= 300)
solver.Add(5 * windrower + 3 * hay_harvester <= 800)
objective = solver.Objective()
objective.SetCoefficient(windrower, 10.0)
objective.SetCoefficient(hay_harvester, 8.0)
objective.SetMaximization()
helicopter_trips = solver.IntVar(0, solver.infinity(), 'helicopter_trips')
bus_trips = solver.IntVar(0, 10, 'bus_trips')
solver.Add(5 * helicopter_trips + 8 * bus_trips >= 120)
solver.Add(helicopter_trips >= 0.3 * (helicopter_trips + bus_trips))
solver.Add(bus_trips <= 10)
total_time = solver.Objective()
total_time.SetCoefficient(helicopter_trips, 1.0)
total_time.SetCoefficient(bus_trips, 3.0)
total_time.SetMinimization()
northern_hours = solver.IntVar(0, solver.infinity(), 'northern_hours')
western_hours = solver.IntVar(0, solver.infinity(), 'western_hours')
solver.Add(800 * northern_hours + 650 * western_hours >= 800000)
solver.Add(700 * northern_hours + 750 * western_hours >= 700000)
solver.Add(40 * northern_hours + 35 * western_hours <= 60000)
objective = solver.Objective()
objective.SetCoefficient(northern_hours, 1.0)
objective.SetCoefficient(western_hours, 1.0)
objective.SetMinimization()
crab_cakes = solver.IntVar(0, solver.infinity(), 'crab_cakes')
lobster_rolls = solver.IntVar(0, solver.infinity(), 'lobster_rolls')
solver.Add(5 * crab_cakes + 8 * lobster_rolls >= 80)
solver.Add(7 * crab_cakes + 4 * lobster_rolls >= 100)
solver.Add(lobster_rolls <= 0.4 * (crab_cakes + lobster_rolls))
objective = solver.Objective()
objective.SetCoefficient(crab_cakes, 4.0)
objective.SetCoefficient(lobster_rolls, 6.0)
objective.SetMinimization()
led = solver.IntVar(0, solver.infinity(), 'led')
fluorescence = solver.IntVar(0, solver.infinity(), 'fluorescence')
solver.Add(led + fluorescence >= 300)
solver.Add(5 * led + 8 * fluorescence <= 2000)
solver.Add(fluorescence >= 0.3 * (led + fluorescence))
objective = solver.Objective()
objective.SetCoefficient(led, 3.0)
objective.SetCoefficient(fluorescence, 4.0)
objective.SetMinimization()
A = solver.IntVar(0, solver.infinity(), 'A')
B = solver.IntVar(0, solver.infinity(), 'B')
solver.Add(A <= (1/3) * B)
solver.Add(A >= 300)
solver.Add(A + B >= 1500)
objective = solver.Objective()
objective.SetCoefficient(A, 30.0)
objective.SetCoefficient(B, 45.0)
objective.SetMinimization()
hamburgers = solver.IntVar(0, solver.infinity(), 'hamburgers')
wraps = solver.IntVar(0, solver.infinity(), 'wraps')
solver.Add(800 * hamburgers + 450 * wraps >= 2200)
solver.Add(19 * hamburgers + 12 * wraps >= 50)
solver.Add(20 * hamburgers + 10 * wraps >= 70)
objective = solver.Objective()
objective.SetCoefficient(hamburgers, 6.5)
objective.SetCoefficient(wraps, 4.0)
objective.SetMinimization()
machine1 = solver.IntVar(0, solver.infinity(), 'machine1')
machine2 = solver.IntVar(0, solver.infinity(), 'machine2')
solver.Add(0.5 * machine1 + 0.3 * machine2 <= 8)
solver.Add(0.8 * machine1 + 1 * machine2 >= 4)
objective = solver.Objective()
objective.SetCoefficient(machine1, 0.3)
objective.SetCoefficient(machine2, 0.5)
objective.SetMinimization()
bus_trips = solver.IntVar(0, 10, 'bus_trips')
car_trips = solver.IntVar(0, solver.infinity(), 'car_trips')
solver.Add(bus_trips <= 10)
solver.Add(car_trips >= 0.6 * (bus_trips + car_trips))
solver.Add(100 * bus_trips + 40 * car_trips >= 1200)
total_time = 2 * bus_trips + 1.5 * car_trips
objective = solver.Objective()
objective.SetCoefficient(bus_trips, 2.0)
objective.SetCoefficient(car_trips, 1.5)
objective.SetMinimization()
beam1 = solver.IntVar(0, solver.infinity(), 'beam1')
beam2 = solver.IntVar(0, solver.infinity(), 'beam2')
solver.Add(0.3 * beam1 + 0.2 * beam2 <= 4)
solver.Add(0.6 * beam1 + 0.4 * beam2 >= 3)
objective = solver.Objective()
objective.SetCoefficient(beam1, 0.3)
objective.SetCoefficient(beam2, 0.2)
objective.SetMinimization()
pain_killer_1 = solver.IntVar(0, solver.infinity(), 'pain_killer_1')
pain_killer_2 = solver.IntVar(0, solver.infinity(), 'pain_killer_2')
solver.Add(0.5 * pain_killer_1 + 0.7 * pain_killer_2 >= 4)
solver.Add(0.8 * pain_killer_1 + 0.4 * pain_killer_2)
solver.Add(0.3 * pain_killer_1 + 0.6 * pain_killer_2 <= 8)
objective = solver.Objective()
objective.SetCoefficient(pain_killer_1, 0.8)
objective.SetCoefficient(pain_killer_2, 0.4)
objective.SetMaximization()
containers = solver.IntVar(15, solver.infinity(), 'containers')
trucks = solver.IntVar(0, solver.infinity(), 'trucks')
solver.Add(30 * containers + 40 * trucks >= 2000)
solver.Add(trucks <= containers / 2)
solver.Add(containers >= 15)
objective = solver.Objective()
objective.SetCoefficient(containers, 1.0)
objective.SetCoefficient(trucks, 1.0)
objective.SetMinimization()
old_vans = solver.IntVar(0, solver.infinity(), 'old_vans')
new_vans = solver.IntVar(0, 30, 'new_vans')
solver.Add(100 * old_vans + 80 * new_vans >= 5000)
solver.Add(new_vans <= 30)
objective = solver.Objective()
objective.SetCoefficient(old_vans, 50.0)
objective.SetCoefficient(new_vans, 30.0)
objective.SetMinimization()
turnips = solver.IntVar(0, 500, 'turnips')
pumpkins = solver.IntVar(0, 500, 'pumpkins')
solver.Add(turnips + pumpkins <= 500)
solver.Add(50 * turnips + 90 * pumpkins <= 40000)
solver.Add(80 * turnips + 50 * pumpkins <= 34000)
objective = solver.Objective()
objective.SetCoefficient(turnips, 300.0)
objective.SetCoefficient(pumpkins, 450.0)
objective.SetMaximization()
boat_trips = solver.IntVar(0, 12, 'boat_trips')
canoe_trips = solver.IntVar(0, solver.infinity(), 'canoe_trips')
solver.Add(boat_trips <= 12)
solver.Add(canoe_trips >= 0.6 * (boat_trips + canoe_trips))
solver.Add(10 * boat_trips + 8 * canoe_trips >= 300)
total_time = 20 * boat_trips + 40 * canoe_trips
objective = solver.Objective()
objective.SetCoefficient(total_time, 1.0)
objective.SetMinimization()
cheap_box = solver.IntVar(0, solver.infinity(), 'cheap_box')
expensive_box = solver.IntVar(0, solver.infinity(), 'expensive_box')
solver.Add(3 * cheap_box + 5 * expensive_box <= 200)
solver.Add(5 * cheap_box + 8 * expensive_box <= 300)
solver.Add(2 * cheap_box + 3 * expensive_box <= 50)
objective = solver.Objective()
objective.SetCoefficient(cheap_box, 8.0)
objective.SetCoefficient(expensive_box, 10.0)
objective.SetMaximization()
labradors = solver.IntVar(0, solver.infinity(), 'labradors')
golden_retrievers = solver.IntVar(50, solver.infinity(), 'golden_retrievers')
solver.Add(5 * labradors + 6 * golden_retrievers <= 1500)
solver.Add(labradors <= 0.6 * (labradors + golden_retrievers))
objective = solver.Objective()
objective.SetCoefficient(labradors, 7.0)
objective.SetCoefficient(golden_retrievers, 10.0)
objective.SetMaximization()
pi_tv = solver.IntVar(0, solver.infinity(), 'pi_tv')
beta_video = solver.IntVar(0, 8, 'beta_video')
gamma_live = solver.IntVar(0, solver.infinity(), 'gamma_live')
solver.Add(1200 * pi_tv + 2000 * beta_video + 4000 * gamma_live <= 20000)
solver.Add(pi_tv + beta_video + gamma_live >= 0)
solver.Add(gamma_live <= (pi_tv + beta_video + gamma_live) / 3)
solver.Add(pi_tv >= 0.2 * (pi_tv + beta_video + gamma_live))
objective = solver.Objective()
objective.SetCoefficient(pi_tv, 2000.0)
objective.SetCoefficient(beta_video, 5000.0)
objective.SetCoefficient(gamma_live, 9000.0)
objective.SetMaximization()
thin_jar = solver.IntVar(0, solver.infinity(), 'thin_jar')
stubby_jar = solver.IntVar(0, solver.infinity(), 'stubby_jar')
solver.Add(50 * thin_jar + 30 * stubby_jar <= 3000)
solver.Add(90 * thin_jar + 150 * stubby_jar <= 4000)
objective = solver.Objective()
objective.SetCoefficient(thin_jar, 5.0)
objective.SetCoefficient(stubby_jar, 9.0)
objective.SetMaximization()
plane_trips = solver.IntVar(0, solver.infinity(), 'plane_trips')
truck_trips = solver.IntVar(0, solver.infinity(), 'truck_trips')
solver.Add(10 * plane_trips + 6 * truck_trips >= 200)
solver.Add(1000 * plane_trips + 700 * truck_trips <= 22000)
solver.Add(plane_trips <= truck_trips)
objective = solver.Objective()
objective.SetCoefficient(plane_trips, 1.0)
objective.SetCoefficient(truck_trips, 1.0)
objective.SetMinimization()
black_tea = solver.IntVar(0, solver.infinity(), 'black_tea')
matcha_tea = solver.IntVar(0, solver.infinity(), 'matcha_tea')
solver.Add(600 * black_tea + 525 * matcha_tea <= 30000)
solver.Add(10 * black_tea + 5 * matcha_tea <= 500)
objective = solver.Objective()
objective.SetCoefficient(black_tea, 7.5)
objective.SetCoefficient(matcha_tea, 5.0)
objective.SetMaximization()
bikes = solver.IntVar(0, solver.infinity(), 'bikes')
scooters = solver.IntVar(0, solver.infinity(), 'scooters')
solver.Add(bikes + scooters <= 40)
solver.Add(5 * bikes + 6 * scooters <= 230)
solver.Add(10 * bikes + 7 * scooters >= 320)
solver.Add(scooters >= 5)
objective = solver.Objective()
objective.SetCoefficient(bikes, 50.0)
objective.SetCoefficient(scooters, 43.0)
objective.SetMaximization()
carts = solver.IntVar(0, solver.infinity(), 'carts')
trolleys = solver.IntVar(0, solver.infinity(), 'trolleys')
solver.Add(5 * carts + 7 * trolleys >= 100)
solver.Add(trolleys >= 12)
solver.Add(trolleys <= 0.4 * (carts + trolleys))
solver.Add(carts >= 0)
solver.Add(trolleys >= 0)
total_workers = 2 * carts + 4 * trolleys
objective = solver.Objective()
objective.SetCoefficient(total_workers, 1.0)
objective.SetMinimization()
large_planes = solver.IntVar(0, solver.infinity(), 'large_planes')
small_planes = solver.IntVar(0, solver.infinity(), 'small_planes')
solver.Add(30 * large_planes + 10 * small_planes >= 300)
solver.Add(large_planes < small_planes)
objective = solver.Objective()
objective.SetCoefficient(large_planes, 1.0)
objective.SetCoefficient(small_planes, 1.0)
objective.SetMinimization()
cheesecake = solver.IntVar(0, solver.infinity(), 'cheesecake')
caramel_cake = solver.IntVar(0, solver.infinity(), 'caramel_cake')
solver.Add(200 * cheesecake + 250 * caramel_cake <= 10000)
solver.Add(caramel_cake >= 3)
solver.Add(cheesecake >= 3 * caramel_cake)
objective = solver.Objective()
objective.SetCoefficient(cheesecake, 40.0)
objective.SetCoefficient(caramel_cake, 50.0)
objective.SetMaximization()
small_trucks = solver.IntVar(0, solver.infinity(), 'small_trucks')
large_trucks = solver.IntVar(0, solver.infinity(), 'large_trucks')
solver.Add(2 * small_trucks + 4 * large_trucks <= 30)
solver.Add(small_trucks >= 10)
solver.Add(large_trucks >= 3)
solver.Add(small_trucks == 2 * large_trucks)
objective = solver.Objective()
objective.SetCoefficient(small_trucks, 30.0)
objective.SetCoefficient(large_trucks, 50.0)
objective.SetMaximization()
canoes = solver.IntVar(0, solver.infinity(), 'canoes')
diesel_boats = solver.IntVar(0, solver.infinity(), 'diesel_boats')
solver.Add(10 * canoes + 15 * diesel_boats >= 1000)
solver.Add(canoes >= 3 * diesel_boats)
objective = solver.Objective()
objective.SetCoefficient(canoes, 1.0)
objective.SetCoefficient(diesel_boats, 1.0)
objective.SetMinimization()
potatoes = solver.IntVar(0, solver.infinity(), 'potatoes')
cucumbers = solver.IntVar(0, solver.infinity(), 'cucumbers')
solver.Add(potatoes + cucumbers <= 50)
solver.Add(potatoes >= 12)
solver.Add(cucumbers >= 15)
solver.Add(cucumbers > potatoes)
solver.Add(cucumbers <= 2 * potatoes)
objective = solver.Objective()
objective.SetCoefficient(potatoes, 500.0)
objective.SetCoefficient(cucumbers, 650.0)
objective.SetMaximization()
alpha = solver.IntVar(0, solver.infinity(), 'alpha')
omega = solver.IntVar(0, solver.infinity(), 'omega')
solver.Add(30 * alpha + 20 * omega >= 100)
solver.Add(350 * alpha + 300 * omega >= 2000)
solver.Add(omega <= 0.35 * (alpha + omega))
objective = solver.Objective()
objective.SetCoefficient(20.0, omega)
objective.SetMinimization()
chop_saws = solver.IntVar(0, solver.infinity(), 'chop_saws')
steel_cutters = solver.IntVar(0, solver.infinity(), 'steel_cutters')
solver.Add(25 * chop_saws + 5 * steel_cutters >= 520)
solver.Add(25 * chop_saws + 3 * steel_cutters <= 400)
objective = solver.Objective()
objective.SetCoefficient(chop_saws, 1.0)
objective.SetCoefficient(steel_cutters, 1.0)
objective.SetMinimization()
sulfate = solver.IntVar(0, solver.infinity(), 'sulfate')
ginger = solver.IntVar(0, solver.infinity(), 'ginger')
solver.Add(sulfate >= 100)
solver.Add(sulfate + ginger <= 400)
solver.Add(sulfate <= 2 * ginger)
objective = solver.Objective()
objective.SetCoefficient(sulfate, 0.5)
objective.SetCoefficient(ginger, 0.75)
objective.SetMinimization()
sedans = solver.IntVar(0, solver.infinity(), 'sedans')
buses = solver.IntVar(0, solver.infinity(), 'buses')
solver.Add(10 * sedans + 40 * buses <= 800)
solver.Add(50 * sedans + 250 * buses >= 4600)
objective = solver.Objective()
objective.SetCoefficient(sedans, 1.0)
objective.SetCoefficient(buses, 1.0)
objective.SetMinimization()
basketballs = solver.IntVar(0, solver.infinity(), 'basketballs')
footballs = solver.IntVar(0, solver.infinity(), 'footballs')
solver.Add(5 * basketballs + 3 * footballs <= 1500)
solver.Add(basketballs + 2 * footballs <= 750)
solver.Add(basketballs >= 3 * footballs)
solver.Add(footballs >= 50)
objective = solver.Objective()
objective.SetCoefficient(basketballs, 1.0)
objective.SetCoefficient(footballs, 1.0)
objective.SetMaximization()
l = solver.IntVar(0, solver.infinity(), 'l')
b = solver.IntVar(0, solver.infinity(), 'b')
solver.Add(12 * l + 18 * b >= 400)
solver.Add(l >= 0.7 * (l + b))
objective = solver.Objective()
objective.SetCoefficient(l, 1.0)
objective.SetCoefficient(b, 1.0)
objective.SetMinimization()
motorcycles = solver.IntVar(0, solver.infinity(), 'motorcycles')
sedans = solver.IntVar(0, solver.infinity(), 'sedans')
solver.Add(30 * motorcycles + 70 * sedans >= 1200)
solver.Add(4 * motorcycles + 15 * sedans < 200)
solver.Add(motorcycles <= 0.25 * (motorcycles + sedans))
objective = solver.Objective()
objective.SetCoefficient(motorcycles, 100.0)
objective.SetCoefficient(sedans, 225.0)
objective.SetMaximization()
vans = solver.IntVar(0, solver.infinity(), 'vans')
trucks = solver.IntVar(0, solver.infinity(), 'trucks')
solver.Add(50 * vans + 80 * trucks >= 1500)
solver.Add(30 * vans + 50 * trucks <= 1000)
solver.Add(vans > trucks)
objective = solver.Objective()
objective.SetCoefficient(vans, 1.0)
objective.SetCoefficient(trucks, 1.0)
objective.SetMinimization()
freight = solver.IntVar(0, solver.infinity(), 'freight')
air = solver.IntVar(0, solver.infinity(), 'air')
solver.Add(5 * freight + 3 * air >= 200)
solver.Add(300 * freight + 550 * air <= 20000)
solver.Add(3 * air >= 0.3 * (5 * freight + 3 * air))
solver.Add(freight >= 5)
objective = solver.Objective()
objective.SetCoefficient(freight, 1.0)
objective.SetCoefficient(air, 1.0)
objective.SetMinimization()
small_kegs = solver.IntVar(0, 30, 'small_kegs')
large_kegs = solver.IntVar(5, 10, 'large_kegs')
solver.Add(small_kegs + large_kegs <= 25)
solver.Add(small_kegs >= 2 * large_kegs)
objective = solver.Objective()
objective.SetCoefficient(small_kegs, 40.0)
objective.SetCoefficient(large_kegs, 100.0)
objective.SetMaximization()
high_intensity = solver.IntVar(0, solver.infinity(), 'high_intensity')
low_intensity = solver.IntVar(0, solver.infinity(), 'low_intensity')
solver.Add(50 * high_intensity + 30 * low_intensity >= 800)
solver.Add(50 * high_intensity + 20 * low_intensity <= 700)
solver.Add(high_intensity <= 0.4 * (high_intensity + low_intensity))
solver.Add(low_intensity >= 10)
objective = solver.Objective()
objective.SetCoefficient(high_intensity, 1.0)
objective.SetCoefficient(low_intensity, 1.0)
objective.SetMinimization()
tomatoes = solver.IntVar(20, 140, 'tomatoes')
potatoes = solver.IntVar(30, 140, 'potatoes')
solver.Add(tomatoes + potatoes <= 140)
solver.Add(tomatoes > potatoes)
solver.Add(tomatoes <= 2 * potatoes)
objective = solver.Objective()
objective.SetCoefficient(tomatoes, 350.0)
objective.SetCoefficient(potatoes, 600.0)
objective.SetMaximization()
J = solver.IntVar(0, solver.infinity(), 'J')
P = solver.IntVar(0, solver.infinity(), 'P')
solver.Add(8 * J + 6 * P <= 1500)
solver.Add(3 * J + 5 * P <= 1350)
objective = solver.Objective()
objective.SetCoefficient(J, 5.0)
objective.SetCoefficient(P, 9.0)
objective.SetMaximization()
staff = solver.IntVar(0, solver.infinity(), 'staff')
substitute = solver.IntVar(0, solver.infinity(), 'substitute')
solver.Add(6 * staff + 3 * substitute >= 1000)
solver.Add(300 * staff + 100 * substitute <= 40000)
objective = solver.Objective()
objective.SetCoefficient(staff, 1.0)
objective.SetCoefficient(substitute, 1.0)
objective.SetMinimization()
x1 = solver.IntVar(0, solver.infinity(), 'x1')
x2 = solver.IntVar(0, solver.infinity(), 'x2')
solver.Add(x1 <= 100)
solver.Add(x2 <= 80)
solver.Add(x1 + x2 <= 100)
objective = solver.Objective()
objective.SetCoefficient(x1, 5.5)
objective.SetCoefficient(x2, 12.0)
objective.SetMaximization()
washing_machine = solver.IntVar(0, solver.infinity(), 'washing_machine')
freezer = solver.IntVar(0, solver.infinity(), 'freezer')
solver.Add(30 * washing_machine + 20 * freezer <= 5000)
solver.Add(90 * washing_machine + 125 * freezer <= 20000)
objective = solver.Objective()
objective.SetCoefficient(washing_machine, 250.0)
objective.SetCoefficient(freezer, 375.0)
objective.SetMaximization()
v = solver.IntVar(0, solver.infinity(), 'v')
f = solver.IntVar(0, solver.infinity(), 'f')
solver.Add(2 * v + 4 * f >= 20)
solver.Add(3 * v + 1 * f >= 30)
objective = solver.Objective()
objective.SetCoefficient(v, 3.0)
objective.SetCoefficient(f, 5.0)
objective.SetMinimization()
pills = solver.IntVar(0, solver.infinity(), 'pills')
shots = solver.IntVar(0, solver.infinity(), 'shots')
solver.Add(10 * pills + 20 * shots <= 10000)
solver.Add(shots >= 3 * pills)
solver.Add(pills >= 30)
objective = solver.Objective()
objective.SetCoefficient(pills, 1.0)
objective.SetCoefficient(shots, 1.0)
objective.SetMaximization()
kayak_trips = solver.IntVar(0, solver.infinity(), 'kayak_trips')
motorboat_trips = solver.IntVar(0, 25, 'motorboat_trips')
solver.Add(4 * kayak_trips + 5 * motorboat_trips >= 550)
solver.Add(motorboat_trips <= 25)
solver.Add(kayak_trips >= 0.75 * (kayak_trips + motorboat_trips))
total_time = 5 * kayak_trips + 3 * motorboat_trips
objective = solver.Objective()
objective.SetCoefficient(kayak_trips, 5.0)
objective.SetCoefficient(motorboat_trips, 3.0)
objective.SetMinimization()
A = solver.IntVar(0, solver.infinity(), 'A')
B = solver.IntVar(0, solver.infinity(), 'B')
solver.Add(5 * A + 7 * B <= 1000)
solver.Add(6 * A + 3 * B <= 800)
objective = solver.Objective()
objective.SetCoefficient(A, 10.0)
objective.SetCoefficient(B, 8.0)
objective.SetMaximization()
full_time = solver.IntVar(0, solver.infinity(), 'full_time')
part_time = solver.IntVar(0, solver.infinity(), 'part_time')
solver.Add(40 * full_time + 15 * part_time == 1000)
solver.Add(1280 * full_time + 450 * part_time <= 31500)
objective = solver.Objective()
objective.SetCoefficient(full_time, 1.0)
objective.SetCoefficient(part_time, 1.0)
objective.SetMinimization()
glass_bottles = solver.IntVar(20, solver.infinity(), 'glass_bottles')
plastic_bottles = solver.IntVar(0, solver.infinity(), 'plastic_bottles')
solver.Add(500 * glass_bottles + 750 * plastic_bottles <= 250000)
solver.Add(plastic_bottles >= 3 * glass_bottles)
objective = solver.Objective()
objective.SetCoefficient(glass_bottles, 1.0)
objective.SetCoefficient(plastic_bottles, 1.0)
objective.SetMaximization()
laminate = solver.IntVar(0, solver.infinity(), 'laminate')
carpet = solver.IntVar(0, solver.infinity(), 'carpet')
solver.Add(laminate >= 15000)
solver.Add(carpet >= 5000)
solver.Add(laminate + carpet >= 50000)
solver.Add(laminate <= 40000)
solver.Add(carpet <= 20000)
objective = solver.Objective()
objective.SetCoefficient(laminate, 2.1)
objective.SetCoefficient(carpet, 3.3)
objective.SetMaximization()
e = solver.IntVar(0, solver.infinity(), 'e')
r = solver.IntVar(0, solver.infinity(), 'r')
solver.Add(3 * e + 2 * r <= 15000)
solver.Add(e >= 2 * r)
solver.Add(r >= 50)
objective = solver.Objective()
objective.SetCoefficient(e, 1.0)
objective.SetCoefficient(r, 1.0)
objective.SetMaximization()
desk_lamps = solver.IntVar(0, solver.infinity(), 'desk_lamps')
night_lamps = solver.IntVar(0, solver.infinity(), 'night_lamps')
solver.Add(desk_lamps >= 30)
solver.Add(night_lamps >= 50)
solver.Add(desk_lamps <= 150)
solver.Add(night_lamps <= 180)
solver.Add(desk_lamps + night_lamps >= 100)
objective = solver.Objective()
objective.SetCoefficient(desk_lamps, 5.0)
objective.SetCoefficient(night_lamps, 8.0)
objective.SetMaximization()
traditional = solver.IntVar(0, 500, 'traditional')
modern = solver.IntVar(0, 500, 'modern')
solver.Add(traditional + modern <= 500)
solver.Add(20 * traditional + 15 * modern <= 9000)
solver.Add(10 * traditional + 15 * modern <= 6000)
objective = solver.Objective()
objective.SetCoefficient(traditional, 30.0)
objective.SetCoefficient(modern, 40.0)
objective.SetMaximization()
graph_paper = solver.IntVar(0, solver.infinity(), 'graph_paper')
music_paper = solver.IntVar(0, solver.infinity(), 'music_paper')
solver.Add(3 * graph_paper + 1.5 * music_paper <= 350)
solver.Add(5.5 * graph_paper + 3 * music_paper <= 350)
objective = solver.Objective()
objective.SetCoefficient(graph_paper, 4.0)
objective.SetCoefficient(music_paper, 2.5)
objective.SetMaximization()
bananas = solver.IntVar(0, solver.infinity(), 'bananas')
mangoes = solver.IntVar(0, solver.infinity(), 'mangoes')
solver.Add(80 * bananas + 100 * mangoes >= 4000)
solver.Add(20 * bananas + 15 * mangoes >= 150)
solver.Add(mangoes <= 0.33 * (bananas + mangoes))
objective = solver.Objective()
objective.SetCoefficient(bananas, 10.0)
objective.SetCoefficient(mangoes, 8.0)
objective.SetMinimization()
m = solver.IntVar(0, solver.infinity(), 'm')
s = solver.IntVar(0, solver.infinity(), 's')
solver.Add(m == 5 * s)
solver.Add(5 * m + 2 * s <= 1000)
solver.Add(2 * m + s <= 250)
solver.Add(s >= 30)
objective = solver.Objective()
objective.SetCoefficient(m, 1.0)
objective.SetCoefficient(s, 1.0)
objective.SetMaximization()
seasonal = solver.IntVar(0, solver.infinity(), 'seasonal')
permanent = solver.IntVar(0, solver.infinity(), 'permanent')
solver.Add(6 * seasonal + 10 * permanent >= 300)
solver.Add(120 * seasonal + 250 * permanent <= 6500)
objective = solver.Objective()
objective.SetCoefficient(seasonal, 1.0)
objective.SetCoefficient(permanent, 1.0)
objective.SetMinimization()
small_bottles = solver.IntVar(0, 300, 'small_bottles')
large_bottles = solver.IntVar(50, 100, 'large_bottles')
solver.Add(small_bottles + large_bottles <= 200)
solver.Add(small_bottles >= 2 * large_bottles)
solver.Add(small_bottles <= 300)
solver.Add(large_bottles <= 100)
objective = solver.Objective()
objective.SetCoefficient(small_bottles, 5.0)
objective.SetCoefficient(large_bottles, 20.0)
objective.SetMaximization()
small_bones = solver.IntVar(0, solver.infinity(), 'small_bones')
large_bones = solver.IntVar(0, solver.infinity(), 'large_bones')
solver.Add(10 * small_bones + 15 * large_bones <= 2000)
solver.Add(12 * small_bones + 15 * large_bones >= 810)
solver.Add(large_bones >= 30)
solver.Add(small_bones >= 0.5 * (small_bones + large_bones))
objective = solver.Objective()
objective.SetCoefficient(small_bones, 12.0)
objective.SetCoefficient(large_bones, 15.0)
objective.SetMinimization()
A = solver.IntVar(5, solver.infinity(), 'A')
B = solver.IntVar(0, solver.infinity(), 'B')
solver.Add(30 * A + 50 * B >= 1000)
solver.Add(100 * A + 120 * B <= 3000)
solver.Add(B <= 0.3 * (A + B))
solver.Add(A >= 5)
objective = solver.Objective()
objective.SetCoefficient(A, 1.0)
objective.SetCoefficient(B, 1.0)
objective.SetMinimization()
bread = solver.IntVar(0, solver.infinity(), 'bread')
cookies = solver.IntVar(0, solver.infinity(), 'cookies')
solver.Add(bread + 0.5 * cookies <= 3000)
solver.Add(3 * bread + cookies <= 3000)
objective = solver.Objective()
objective.SetCoefficient(bread, 5.0)
objective.SetCoefficient(cookies, 3.0)
objective.SetMaximization()
small_crates = solver.IntVar(0, 100, 'small_crates')
large_crates = solver.IntVar(10, 50, 'large_crates')
solver.Add(small_crates >= 3 * large_crates)
solver.Add(small_crates + large_crates <= 60)
objective = solver.Objective()
objective.SetCoefficient(small_crates, 200.0)
objective.SetCoefficient(large_crates, 500.0)
objective.SetMaximization()
regular = solver.IntVar(0, solver.infinity(), 'regular')
premium = solver.IntVar(0, solver.infinity(), 'premium')
solver.Add(4 * regular + 12 * premium >= 15)
solver.Add(7 * regular + 10 * premium >= 20)
solver.Add(10 * regular + 16 * premium >= 20)
objective = solver.Objective()
objective.SetCoefficient(regular, 20.0)
objective.SetCoefficient(premium, 35.0)
objective.SetMinimization()
small_bins = solver.IntVar(10, solver.infinity(), 'small_bins')
large_bins = solver.IntVar(4, solver.infinity(), 'large_bins')
solver.Add(2 * small_bins + 5 * large_bins <= 100)
solver.Add(small_bins == 3 * large_bins)
objective = solver.Objective()
objective.SetCoefficient(small_bins, 25.0)
objective.SetCoefficient(large_bins, 60.0)
objective.SetMaximization()
shots = solver.IntVar(0, 10, 'shots')
pills = solver.IntVar(0, solver.infinity(), 'pills')
solver.Add(30 * shots + 50 * pills <= 1200)
solver.Add(40 * shots + 30 * pills <= 1500)
solver.Add(pills > shots)
solver.Add(shots <= 10)
objective = solver.Objective()
objective.SetCoefficient(shots, 10.0)
objective.SetCoefficient(pills, 7.0)
objective.SetMaximization()
subsoil = solver.IntVar(0, solver.infinity(), 'subsoil')
topsoil = solver.IntVar(0, solver.infinity(), 'topsoil')
solver.Add(subsoil + topsoil <= 150)
solver.Add(topsoil >= 10)
solver.Add(topsoil <= 0.3 * (subsoil + topsoil))
objective = solver.Objective()
objective.SetCoefficient(subsoil, 10.0)
objective.SetCoefficient(topsoil, 6.0)
objective.SetMinimization()
m = solver.IntVar(0, solver.infinity(), 'm')
c = solver.IntVar(0, solver.infinity(), 'c')
solver.Add(20 * m + 15 * c <= 3000)
solver.Add(3 * m + 2.3 * c <= 291.4)
solver.Add(c >= 0.6 * (m + c))
solver.Add(m >= 45)
objective = solver.Objective()
objective.SetCoefficient(m, 3.0)
objective.SetCoefficient(c, 2.3)
objective.SetMinimization()
wraps = solver.IntVar(0, solver.infinity(), 'wraps')
platters = solver.IntVar(0, solver.infinity(), 'platters')
solver.Add(5 * wraps + 7 * platters >= 3000)
solver.Add(3 * wraps + 5 * platters >= 2500)
solver.Add(10 * wraps + 8 * platters <= 6794)
solver.Add(wraps >= 3 * platters)
objective = solver.Objective()
objective.SetCoefficient(wraps, 10.0)
objective.SetCoefficient(platters, 8.0)
objective.SetMinimization()
anxiety_medication = solver.IntVar(0, solver.infinity(), 'anxiety_medication')
depressants = solver.IntVar(0, solver.infinity(), 'depressants')
solver.Add(anxiety_medication + depressants >= 100)
solver.Add(anxiety_medication >= 30)
solver.Add(anxiety_medication <= 2 * depressants)
objective = solver.Objective()
objective.SetCoefficient(anxiety_medication, 3.0)
objective.SetCoefficient(depressants, 5.0)
objective.SetMinimization()
milk = solver.IntVar(0, solver.infinity(), 'milk')
vegetables = solver.IntVar(0, solver.infinity(), 'vegetables')
solver.Add(40 * milk + 15 * vegetables >= 100)
solver.Add(25 * milk + 30 * vegetables >= 50)
objective = solver.Objective()
objective.SetCoefficient(milk, 1.0)
objective.SetCoefficient(vegetables, 2.0)
objective.SetMinimization()
chlorine = solver.IntVar(200, solver.infinity(), 'chlorine')
water_softener = solver.IntVar(0, solver.infinity(), 'water_softener')
solver.Add(chlorine <= 0.5 * water_softener)
solver.Add(chlorine + water_softener <= 500)
objective = solver.Objective()
objective.SetCoefficient(chlorine, 1.0)
objective.SetCoefficient(water_softener, 2.0)
objective.SetMinimization()
trucks = solver.IntVar(0, solver.infinity(), 'trucks')
vans = solver.IntVar(0, solver.infinity(), 'vans')
solver.Add(1000 * trucks + 500 * vans >= 50000)
solver.Add(300 * trucks + 100 * vans <= 12500)
solver.Add(trucks <= vans)
objective = solver.Objective()
objective.SetCoefficient(trucks, 1.0)
objective.SetCoefficient(vans, 1.0)
objective.SetMinimization()
rice = solver.IntVar(0, solver.infinity(), 'rice')
kebab = solver.IntVar(0, solver.infinity(), 'kebab')
solver.Add(3 * rice + 2 * kebab <= 22.0)
solver.Add(300 * rice + 200 * kebab >= 2200)
solver.Add(4.5 * rice + 4 * kebab >= 30)
objective = solver.Objective()
objective.SetCoefficient(rice, 3.0)
objective.SetCoefficient(kebab, 2.0)
objective.SetMinimization()
color_printers = solver.IntVar(0, 20, 'color_printers')
black_and_white_printers = solver.IntVar(0, 30, 'black_and_white_printers')
solver.Add(color_printers <= 20)
solver.Add(black_and_white_printers <= 30)
solver.Add(color_printers + black_and_white_printers <= 35)
objective = solver.Objective()
objective.SetCoefficient(color_printers, 200.0)
objective.SetCoefficient(black_and_white_printers, 70.0)
objective.SetMaximization()
regular = solver.IntVar(0, solver.infinity(), 'regular')
emergency = solver.IntVar(0, solver.infinity(), 'emergency')
solver.Add(10 * regular + 6 * emergency >= 300)
solver.Add(300 * regular + 100 * emergency <= 7000)
objective = solver.Objective()
objective.SetCoefficient(regular, 1.0)
objective.SetCoefficient(emergency, 1.0)
objective.SetMinimization()
glass_jars = solver.IntVar(20, solver.infinity(), 'glass_jars')
plastic_jars = solver.IntVar(0, solver.infinity(), 'plastic_jars')
solver.Add(250 * glass_jars + 300 * plastic_jars <= 20000)
solver.Add(plastic_jars >= 2 * glass_jars)
objective = solver.Objective()
objective.SetCoefficient(glass_jars, 1.0)
objective.SetCoefficient(plastic_jars, 1.0)
objective.SetMaximization()
scooters = solver.IntVar(0, solver.infinity(), 'scooters')
rickshaws = solver.IntVar(0, solver.infinity(), 'rickshaws')
solver.Add(2 * scooters + 3 * rickshaws >= 300)
solver.Add(rickshaws <= 0.4 * (scooters + rickshaws))
objective = solver.Objective()
objective.SetCoefficient(scooters, 1.0)
objective.SetMinimization()
runners = solver.IntVar(4, solver.infinity(), 'runners')
canoers = solver.IntVar(0, solver.infinity(), 'canoers')
solver.Add(4 * runners + 2 * canoers <= 200)
solver.Add(canoers <= 0.33 * (runners + canoers))
objective = solver.Objective()
objective.SetCoefficient(runners, 3.0)
objective.SetCoefficient(canoers, 10.0)
objective.SetMaximization()
banana_haters = solver.IntVar(0, solver.infinity(), 'banana_haters')
combo = solver.IntVar(0, solver.infinity(), 'combo')
solver.Add(6 * banana_haters + 5 * combo <= 10)
solver.Add(6 * combo <= 20)
solver.Add(30 * banana_haters + 20 * combo <= 80)
objective = solver.Objective()
objective.SetCoefficient(banana_haters, 6.0)
objective.SetCoefficient(combo, 7.0)
objective.SetMaximization()
large = solver.IntVar(5, solver.infinity(), 'large')
small = solver.IntVar(5, solver.infinity(), 'small')
solver.Add(4 * large + 2 * small <= 100)
solver.Add(3 * large + 1 * small <= 50)
solver.Add(5 * large + 2 * small <= 70)
objective = solver.Objective()
objective.SetCoefficient(large, 30.0)
objective.SetCoefficient(small, 15.0)
objective.SetMaximization()
wide_pipes = solver.IntVar(5, solver.infinity(), 'wide_pipes')
narrow_pipes = solver.IntVar(0, solver.infinity(), 'narrow_pipes')
solver.Add(wide_pipes <= (1/3) * narrow_pipes)
solver.Add(25 * wide_pipes + 15 * narrow_pipes >= 900)
objective = solver.Objective()
objective.SetCoefficient(wide_pipes, 1.0)
objective.SetCoefficient(narrow_pipes, 1.0)
objective.SetMinimization()
small_wells = solver.IntVar(0, 300, 'small_wells')
large_wells = solver.IntVar(0, 300, 'large_wells')
solver.Add(small_wells + large_wells <= 300)
solver.Add(5 * small_wells + 10 * large_wells <= 2500)
solver.Add(10 * small_wells + 20 * large_wells <= 4500)
objective = solver.Objective()
objective.SetCoefficient(small_wells, 2.0)
objective.SetCoefficient(large_wells, 5.0)
objective.SetMaximization()
helicopter_trips = solver.IntVar(0, 5, 'helicopter_trips')
car_trips = solver.IntVar(0, solver.infinity(), 'car_trips')
solver.Add(30 * helicopter_trips + 20 * car_trips >= 300)
solver.Add(car_trips >= 0.6 * (helicopter_trips + car_trips))
total_time = 40 * helicopter_trips + 30 * car_trips
objective = solver.Objective()
objective.SetCoefficient(helicopter_trips, 40.0)
objective.SetCoefficient(car_trips, 30.0)
objective.SetMinimization()
gas_grills = solver.IntVar(0, solver.infinity(), 'gas_grills')
electric_grills = solver.IntVar(0, solver.infinity(), 'electric_grills')
solver.Add(20 * gas_grills + 30 * electric_grills >= 150)
solver.Add(20 * gas_grills + 25 * electric_grills <= 140)
solver.Add(electric_grills < gas_grills)
objective = solver.Objective()
objective.SetCoefficient(gas_grills, 1.0)
objective.SetCoefficient(electric_grills, 1.0)
objective.SetMinimization()
pill1 = solver.IntVar(0, solver.infinity(), 'pill1')
pill2 = solver.IntVar(0, solver.infinity(), 'pill2')
solver.Add(0.2 * pill1 + 0.6 * pill2 <= 6)
solver.Add(0.3 * pill1 + 0.2 * pill2 >= 3)
solver.Add(0.3 * pill1 + 0.1 * pill2)
objective = solver.Objective()
objective.SetCoefficient(pill1, 0.3)
objective.SetCoefficient(pill2, 0.1)
objective.SetMinimization()
seasonal = solver.IntVar(0, solver.infinity(), 'seasonal')
full_time = solver.IntVar(0, solver.infinity(), 'full_time')
solver.Add(2 * seasonal + 5 * full_time <= 200)
solver.Add(seasonal <= 0.3 * (seasonal + full_time))
solver.Add(full_time >= 10)
objective = solver.Objective()
objective.SetCoefficient(seasonal, 5.0)
objective.SetCoefficient(full_time, 8.0)
objective.SetMaximization()
dual = solver.IntVar(0, solver.infinity(), 'dual')
single = solver.IntVar(0, solver.infinity(), 'single')
solver.Add(50 * dual + 30 * single >= 300)
solver.Add(20 * dual + 15 * single <= 135)
solver.Add(single > dual)
objective = solver.Objective()
objective.SetCoefficient(dual, 1.0)
objective.SetCoefficient(single, 1.0)
objective.SetMinimization()
apple = solver.IntVar(0, solver.infinity(), 'apple')
carrot = solver.IntVar(0, solver.infinity(), 'carrot')
solver.Add(2 * apple + 4 * carrot <= 100)
solver.Add(5 * apple + 3 * carrot <= 100)
solver.Add(apple >= 3 * carrot)
solver.Add(carrot >= 2)
objective = solver.Objective()
objective.SetCoefficient(apple, 2.0)
objective.SetCoefficient(carrot, 4.0)
objective.SetMaximization()
elephants = solver.IntVar(0, solver.infinity(), 'elephants')
tigers = solver.IntVar(0, solver.infinity(), 'tigers')
solver.Add(50 * elephants + 40 * tigers <= 5000)
solver.Add(20 * elephants + 30 * tigers <= 4000)
objective = solver.Objective()
objective.SetCoefficient(elephants, 5.0)
objective.SetCoefficient(tigers, 4.0)
objective.SetMaximization()
factory1_hours = solver.IntVar(0, solver.infinity(), 'factory1_hours')
factory2_hours = solver.IntVar(0, solver.infinity(), 'factory2_hours')
solver.Add(20 * factory1_hours + 10 * factory2_hours >= 700)
solver.Add(15 * factory1_hours + 30 * factory2_hours >= 600)
solver.Add(20 * factory1_hours + 30 * factory2_hours <= 1000)
objective = solver.Objective()
objective.SetCoefficient(factory1_hours, 1.0)
objective.SetCoefficient(factory2_hours, 1.0)
objective.SetMinimization()
C = solver.IntVar(0, solver.infinity(), 'C')
Y = solver.IntVar(0, solver.infinity(), 'Y')
solver.Add(1.5 * C + 5 * Y >= 5)
solver.Add(3 * C + 1 * Y >= 8)
objective = solver.Objective()
objective.SetCoefficient(C, 2.0)
objective.SetCoefficient(Y, 3.0)
objective.SetMinimization()
x1 = solver.IntVar(0, 8, 'x1')
x2 = solver.IntVar(0, 6, 'x2')
solver.Add(x1 <= 8)
solver.Add(x2 <= 6)
solver.Add(x1 + x2 <= 12)
objective = solver.Objective()
objective.SetCoefficient(x1, 5000.0)
objective.SetCoefficient(x2, 8500.0)
objective.SetMaximization()
ferry = solver.IntVar(0, solver.infinity(), 'ferry')
light_rail = solver.IntVar(0, solver.infinity(), 'light_rail')
solver.Add(20 * ferry + 15 * light_rail >= 500)
solver.Add(light_rail >= 4 * ferry)
objective = solver.Objective()
objective.SetCoefficient(ferry, 1.0)
objective.SetCoefficient(light_rail, 1.0)
objective.SetMinimization()
crepe_cake = solver.IntVar(0, solver.infinity(), 'crepe_cake')
sponge_cake = solver.IntVar(0, solver.infinity(), 'sponge_cake')
birthday_cake = solver.IntVar(0, solver.infinity(), 'birthday_cake')
solver.Add(400 * crepe_cake + 500 * sponge_cake + 450 * birthday_cake <= 20000)
solver.Add(200 * crepe_cake + 300 * sponge_cake + 350 * birthday_cake <= 14000)
objective = solver.Objective()
objective.SetCoefficient(crepe_cake, 12.0)
objective.SetCoefficient(sponge_cake, 10.0)
objective.SetCoefficient(birthday_cake, 15.0)
objective.SetMaximization()
circular_tables = solver.IntVar(0, solver.infinity(), 'circular_tables')
rectangular_tables = solver.IntVar(0, solver.infinity(), 'rectangular_tables')
solver.Add(5 * circular_tables + 4 * rectangular_tables >= 500)
solver.Add(4 * circular_tables + 4 * rectangular_tables >= 300)
solver.Add(15 * circular_tables + 20 * rectangular_tables <= 1900)
objective = solver.Objective()
objective.SetCoefficient(circular_tables, 8.0)
objective.SetCoefficient(rectangular_tables, 12.0)
objective.SetMaximization()
u = solver.IntVar(0, solver.infinity(), 'u')
g = solver.IntVar(0, solver.infinity(), 'g')
solver.Add(u >= 2 * g)
solver.Add(8 * u >= 500)
solver.Add(300 * u + 100 * g <= 14000)
objective = solver.Objective()
objective.SetCoefficient(u, 1.0)
objective.SetCoefficient(g, 1.0)
objective.SetMinimization()
high_pressure_trailer = solver.IntVar(0, solver.infinity(), 'high_pressure_trailer')
liquefied_tanker = solver.IntVar(0, solver.infinity(), 'liquefied_tanker')
solver.Add(50 * high_pressure_trailer + 30 * liquefied_tanker >= 1000)
solver.Add(500 * high_pressure_trailer + 200 * liquefied_tanker <= 3750)
solver.Add(high_pressure_trailer < liquefied_tanker)
objective = solver.Objective()
objective.SetCoefficient(high_pressure_trailer, 1.0)
objective.SetCoefficient(liquefied_tanker, 1.0)
objective.SetMinimization()
throwing_games = solver.IntVar(0, solver.infinity(), 'throwing_games')
climbing_games = solver.IntVar(0, solver.infinity(), 'climbing_games')
solver.Add(2 * throwing_games >= climbing_games)
solver.Add(climbing_games >= 5)
solver.Add(2 * throwing_games + 3 * climbing_games <= 100)
solver.Add(15 * throwing_games + 8 * climbing_games)
objective = solver.Objective()
objective.SetCoefficient(throwing_games, 15.0)
objective.SetCoefficient(climbing_games, 8.0)
objective.SetMaximization()
A = solver.IntVar(0, solver.infinity(), 'A')
B = solver.IntVar(0, solver.infinity(), 'B')
solver.Add(30 * A + 60 * B >= 400)
solver.Add(50 * A + 10 * B >= 50)
objective = solver.Objective()
objective.SetCoefficient(A, 14.0)
objective.SetCoefficient(B, 25.0)
objective.SetMinimization()
Zodiac = solver.IntVar(0, solver.infinity(), 'Zodiac')
Sunny = solver.IntVar(0, solver.infinity(), 'Sunny')
solver.Add(1.3 * Zodiac + 1.2 * Sunny >= 5)
solver.Add(1.5 * Zodiac + 5 * Sunny >= 10)
objective = solver.Objective()
objective.SetCoefficient(Zodiac, 1.0)
objective.SetCoefficient(Sunny, 3.0)
objective.SetMinimization()
plush_toys = solver.IntVar(0, solver.infinity(), 'plush_toys')
dolls = solver.IntVar(0, solver.infinity(), 'dolls')
solver.Add(3 * plush_toys + 2 * dolls <= 700)
solver.Add(plush_toys >= 90)
solver.Add(plush_toys <= 190)
solver.Add(dolls <= 2 * plush_toys)
objective = solver.Objective()
objective.SetCoefficient(plush_toys, 4.0)
objective.SetCoefficient(dolls, 2.0)
objective.SetMaximization()
ships = solver.IntVar(0, solver.infinity(), 'ships')
planes = solver.IntVar(0, 10, 'planes')
solver.Add(40 * ships + 20 * planes >= 500)
solver.Add(planes <= 10)
solver.Add(ships >= 0.5 * (ships + planes))
objective = solver.Objective()
objective.SetCoefficient(ships, 500.0)
objective.SetCoefficient(planes, 300.0)
objective.SetMinimization()
painkiller = solver.IntVar(50, solver.infinity(), 'painkiller')
sleeping = solver.IntVar(0, solver.infinity(), 'sleeping')
solver.Add(10 * painkiller + 6 * sleeping <= 3000)
solver.Add(3 * painkiller + 5 * sleeping)
solver.Add(sleeping >= 0.7 * (painkiller + sleeping))
objective = solver.Objective()
objective.SetCoefficient(painkiller, 3.0)
objective.SetCoefficient(sleeping, 5.0)
objective.SetMinimization()
calcium = solver.IntVar(0, solver.infinity(), 'calcium')
vitaminD = solver.IntVar(0, solver.infinity(), 'vitaminD')
solver.Add(calcium + vitaminD >= 130)
solver.Add(vitaminD >= 40)
solver.Add(calcium > vitaminD)
total_time = 5 * calcium + 6 * vitaminD
objective = solver.Objective()
objective.SetCoefficient(calcium, 5.0)
objective.SetCoefficient(vitaminD, 6.0)
objective.SetMinimization()
golf_carts = solver.IntVar(0, solver.infinity(), 'golf_carts')
pull_carts = solver.IntVar(0, solver.infinity(), 'pull_carts')
solver.Add(4 * golf_carts + pull_carts >= 80)
solver.Add(golf_carts <= 0.6 * (golf_carts + pull_carts))
objective = solver.Objective()
objective.SetCoefficient(golf_carts, 1.0)
objective.SetCoefficient(pull_carts, 1.0)
objective.SetMinimization()
dine_in = solver.IntVar(0, solver.infinity(), 'dine_in')
food_truck = solver.IntVar(0, solver.infinity(), 'food_truck')
solver.Add(100 * dine_in + 50 * food_truck >= 500)
solver.Add(8 * dine_in + 3 * food_truck <= 35)
objective = solver.Objective()
objective.SetCoefficient(dine_in, 1.0)
objective.SetCoefficient(food_truck, 1.0)
objective.SetMinimization()
cleansing_chemical = solver.IntVar(0, solver.infinity(), 'cleansing_chemical')
odor_removing_chemical = solver.IntVar(0, solver.infinity(), 'odor_removing_chemical')
solver.Add(cleansing_chemical >= 100)
solver.Add(cleansing_chemical + odor_removing_chemical >= 300)
solver.Add(cleansing_chemical <= 2 * odor_removing_chemical)
total_time = 4 * cleansing_chemical + 6 * odor_removing_chemical
objective = solver.Objective()
objective.SetCoefficient(cleansing_chemical, 4.0)
objective.SetCoefficient(odor_removing_chemical, 6.0)
objective.SetMinimization()
kids = solver.IntVar(50, solver.infinity(), 'kids')
adults = solver.IntVar(0, solver.infinity(), 'adults')
solver.Add(100 * kids + 300 * adults <= 25000)
solver.Add(adults >= 3 * kids)
objective = solver.Objective()
objective.SetCoefficient(kids, 1.0)
objective.SetCoefficient(adults, 1.0)
objective.SetMaximization()
cars = solver.IntVar(0, solver.infinity(), 'cars')
buses = solver.IntVar(0, 4, 'buses')
solver.Add(4 * cars + 20 * buses >= 300)
solver.Add(buses <= 4)
objective = solver.Objective()
objective.SetCoefficient(cars, 10.0)
objective.SetCoefficient(buses, 30.0)
objective.SetMinimization()
z_tube = solver.IntVar(0, solver.infinity(), 'z_tube')
soorchle = solver.IntVar(0, 15, 'soorchle')
wassa = solver.IntVar(0, solver.infinity(), 'wassa')
solver.Add(1000 * z_tube + 200 * soorchle + 100 * wassa <= 10000)
solver.Add(wassa <= (z_tube + soorchle + wassa) / 3)
solver.Add(z_tube >= 0.05 * (z_tube + soorchle + wassa))
objective = solver.Objective()
objective.SetCoefficient(z_tube, 400000)
objective.SetCoefficient(soorchle, 5000)
objective.SetCoefficient(wassa, 3000)
objective.SetMaximization()
otters = solver.IntVar(0, solver.infinity(), 'otters')
dolphins = solver.IntVar(10, 30, 'dolphins')
solver.Add(3 * otters + 5 * dolphins <= 200)
solver.Add(otters <= 0.3 * (otters + dolphins))
objective = solver.Objective()
objective.SetCoefficient(otters, 3.0)
objective.SetCoefficient(dolphins, 1.0)
objective.SetMaximization()
medium_factory = solver.IntVar(0, solver.infinity(), 'medium_factory')
small_factory = solver.IntVar(0, solver.infinity(), 'small_factory')
solver.Add(50 * medium_factory + 35 * small_factory >= 250)
solver.Add(3 * medium_factory + 2 * small_factory <= 16)
objective = solver.Objective()
objective.SetCoefficient(medium_factory, 1.0)
objective.SetCoefficient(small_factory, 1.0)
objective.SetMinimization()
vans = solver.IntVar(0, solver.infinity(), 'vans')
trucks = solver.IntVar(0, solver.infinity(), 'trucks')
solver.Add(50 * vans + 100 * trucks >= 2000)
solver.Add(trucks <= vans)
objective = solver.Objective()
objective.SetCoefficient(vans, 1.0)
objective.SetMinimization()
mangos = solver.IntVar(100, 150, 'mangos')
guavas = solver.IntVar(0, solver.infinity(), 'guavas')
solver.Add(5 * mangos + 3 * guavas <= 20000)
objective = solver.Objective()
objective.SetCoefficient(mangos, 3.0)
objective.SetCoefficient(guavas, 4.0)
objective.SetMaximization()
solver.Add(guavas <= mangos / 3)
ramen = solver.IntVar(0, solver.infinity(), 'ramen')
fries = solver.IntVar(0, solver.infinity(), 'fries')
solver.Add(400 * ramen + 300 * fries >= 3000)
solver.Add(20 * ramen + 10 * fries >= 80)
solver.Add(ramen <= 0.3 * (ramen + fries))
objective = solver.Objective()
objective.SetCoefficient(ramen, 100.0)
objective.SetCoefficient(fries, 75.0)
objective.SetMinimization()
burgers = solver.IntVar(0, solver.infinity(), 'burgers')
pizza = solver.IntVar(0, solver.infinity(), 'pizza')
solver.Add(10 * burgers + 8 * pizza >= 130)
solver.Add(300 * burgers + 250 * pizza >= 3000)
solver.Add(pizza >= 2 * burgers)
solver.Add(12 * burgers + 10 * pizza)
objective = solver.Objective()
objective.SetCoefficient(burgers, 12.0)
objective.SetCoefficient(pizza, 10.0)
objective.SetMinimization()
x = solver.IntVar(0, solver.infinity(), 'x')
y = solver.IntVar(0, solver.infinity(), 'y')
solver.Add(10 * x + 15 * y <= 300)
solver.Add(20 * x + 12 * y <= 300)
objective = solver.Objective()
objective.SetCoefficient(x, 15.0)
objective.SetCoefficient(y, 18.0)
objective.SetMaximization()
helicopter_trips = solver.IntVar(0, solver.infinity(), 'helicopter_trips')
truck_trips = solver.IntVar(0, 8, 'truck_trips')
solver.Add(3 * helicopter_trips + 7 * truck_trips >= 80)
solver.Add(truck_trips <= 8)
objective = solver.Objective()
objective.SetCoefficient(helicopter_trips, 5.0)
objective.SetCoefficient(truck_trips, 10.0)
objective.SetMinimization()
beaker1 = solver.IntVar(0, solver.infinity(), 'beaker1')
beaker2 = solver.IntVar(0, solver.infinity(), 'beaker2')
solver.Add(4 * beaker1 + 6 * beaker2 <= 150)
solver.Add(6 * beaker1 + 3 * beaker2 <= 100)
solver.Add(4 * beaker1 + 2 * beaker2 <= 30)
objective = solver.Objective()
objective.SetCoefficient(beaker1, 5.0)
objective.SetCoefficient(beaker2, 3.0)
objective.SetMaximization()
small_wagons = solver.IntVar(0, solver.infinity(), 'small_wagons')
large_wagons = solver.IntVar(0, solver.infinity(), 'large_wagons')
solver.Add(20 * small_wagons + 50 * large_wagons >= 2000)
solver.Add(small_wagons >= 2 * large_wagons)
solver.Add(large_wagons >= 10)
objective = solver.Objective()
objective.SetCoefficient(small_wagons, 1.0)
objective.SetCoefficient(large_wagons, 1.0)
objective.SetMinimization()
bikes = solver.IntVar(0, solver.infinity(), 'bikes')
cars = solver.IntVar(0, solver.infinity(), 'cars')
solver.Add(3 * bikes + 5 * cars >= 500)
solver.Add(cars <= 0.4 * (bikes + cars))
objective = solver.Objective()
objective.SetCoefficient(bikes, 1.0)
objective.SetMinimization()
fertilizer = solver.IntVar(0, 300, 'fertilizer')
seeds = solver.IntVar(0, 300, 'seeds')
solver.Add(fertilizer + seeds <= 300)
solver.Add(fertilizer >= 50)
solver.Add(fertilizer <= 2 * seeds)
total_time = 0.5 * fertilizer + 1.5 * seeds
objective = solver.Objective()
objective.SetCoefficient(fertilizer, 0.5)
objective.SetCoefficient(seeds, 1.5)
objective.SetMinimization()
experiment1 = solver.IntVar(0, solver.infinity(), 'experiment1')
experiment2 = solver.IntVar(0, solver.infinity(), 'experiment2')
solver.Add(3 * experiment1 + 5 * experiment2 <= 80)
solver.Add(4 * experiment1 + 3 * experiment2 <= 70)
solver.Add(1 * experiment1 + 2 * experiment2 <= 10)
objective = solver.Objective()
objective.SetCoefficient(experiment1, 5.0)
objective.SetCoefficient(experiment2, 6.0)
objective.SetMaximization()
salinity_tests = solver.IntVar(0, solver.infinity(), 'salinity_tests')
pH_tests = solver.IntVar(0, solver.infinity(), 'pH_tests')
solver.Add(pH_tests >= 250)
solver.Add(salinity_tests + pH_tests >= 400)
solver.Add(pH_tests <= 1.5 * salinity_tests)
objective = solver.Objective()
objective.SetCoefficient(salinity_tests, 3.0)
objective.SetCoefficient(pH_tests, 2.0)
objective.SetMinimization()
turkey_dinner = solver.IntVar(0, solver.infinity(), 'turkey_dinner')
tuna_salad = solver.IntVar(0, solver.infinity(), 'tuna_salad')
solver.Add(20 * turkey_dinner + 18 * tuna_salad >= 150)
solver.Add(30 * turkey_dinner + 25 * tuna_salad >= 200)
solver.Add(turkey_dinner <= 0.4 * (turkey_dinner + tuna_salad))
objective = solver.Objective()
objective.SetCoefficient(turkey_dinner, 12.0)
objective.SetCoefficient(tuna_salad, 8.0)
objective.SetMinimization()
large_units = solver.IntVar(0, solver.infinity(), 'large_units')
small_units = solver.IntVar(0, solver.infinity(), 'small_units')
solver.Add(6 * large_units + 2 * small_units >= 80)
solver.Add(small_units >= 5)
solver.Add(large_units >= 0.75 * (large_units + small_units))
objective = solver.Objective()
objective.SetCoefficient(large_units, 2.0)
objective.SetCoefficient(small_units, 1.0)
objective.SetMinimization()
trucks = solver.IntVar(0, 5, 'trucks')
cars = solver.IntVar(0, solver.infinity(), 'cars')
solver.Add(trucks <= 5)
solver.Add(cars >= 0.3 * (trucks + cars))
solver.Add(50 * trucks + 30 * cars >= 500)
objective = solver.Objective()
objective.SetCoefficient(trucks, 20.0)
objective.SetCoefficient(cars, 15.0)
objective.SetMinimization()
bus_trips = solver.IntVar(0, 10, 'bus_trips')
car_trips = solver.IntVar(0, solver.infinity(), 'car_trips')
solver.Add(20 * bus_trips + 6 * car_trips >= 300)
solver.Add(bus_trips <= 10)
solver.Add(car_trips >= 0.6 * (bus_trips + car_trips))
total_time = 30 * bus_trips + 15 * car_trips
objective = solver.Objective()
objective.SetCoefficient(bus_trips, 30.0)
objective.SetCoefficient(car_trips, 15.0)
objective.SetMinimization()
A = solver.IntVar(0, solver.infinity(), 'A')
B = solver.IntVar(0, solver.infinity(), 'B')
solver.Add(13 * A + 8 * B >= 220)
solver.Add(5 * A + 14 * B >= 160)
solver.Add(6 * A + 6 * B <= 350)
objective = solver.Objective()
objective.SetCoefficient(A, 5.0)
objective.SetCoefficient(B, 9.0)
objective.SetMinimization()
retail_stores = solver.IntVar(0, solver.infinity(), 'retail_stores')
factory_outlets = solver.IntVar(0, solver.infinity(), 'factory_outlets')
solver.Add(200 * retail_stores + 80 * factory_outlets >= 1200)
solver.Add(6 * retail_stores + 4 * factory_outlets <= 50)
objective = solver.Objective()
objective.SetCoefficient(retail_stores, 1.0)
objective.SetCoefficient(factory_outlets, 1.0)
objective.SetMinimization()
A = solver.IntVar(0, solver.infinity(), 'A')
B = solver.IntVar(0, solver.infinity(), 'B')
solver.Add(5 * A + 4 * B >= 40)
solver.Add(10 * A + 15 * B >= 50)
objective = solver.Objective()
objective.SetCoefficient(A, 2.0)
objective.SetCoefficient(B, 3.0)
objective.SetMinimization()
submarine_trips = solver.IntVar(0, 6, 'submarine_trips')
boat_trips = solver.IntVar(0, solver.infinity(), 'boat_trips')
solver.Add(submarine_trips <= 6)
solver.Add(boat_trips >= 0.5 * (submarine_trips + boat_trips))
solver.Add(100 * submarine_trips + 80 * boat_trips >= 1000)
objective = solver.Objective()
objective.SetCoefficient(submarine_trips, 30.0)
objective.SetCoefficient(boat_trips, 25.0)
objective.SetMinimization()
chocolate = solver.IntVar(0, solver.infinity(), 'chocolate')
vanilla = solver.IntVar(0, solver.infinity(), 'vanilla')
solver.Add(chocolate >= 5)
solver.Add(vanilla >= 5)
solver.Add(chocolate <= 10)
solver.Add(vanilla <= 8)
solver.Add(chocolate + 2 * vanilla <= 30)
solver.Add(chocolate + 2 * vanilla >= 6)
objective = solver.Objective()
objective.SetCoefficient(chocolate, 200.0)
objective.SetCoefficient(vanilla, 300.0)
objective.SetMaximization()
camels = solver.IntVar(0, solver.infinity(), 'camels')
horses = solver.IntVar(0, solver.infinity(), 'horses')
solver.Add(50 * camels + 60 * horses >= 1000)
solver.Add(20 * camels + 30 * horses <= 450)
solver.Add(horses <= camels)
objective = solver.Objective()
objective.SetCoefficient(camels, 1.0)
objective.SetCoefficient(horses, 1.0)
objective.SetMinimization()
noodles = solver.IntVar(0, solver.infinity(), 'noodles')
protein_bars = solver.IntVar(0, solver.infinity(), 'protein_bars')
objective = solver.Objective()
objective.SetCoefficient(noodles, 5.0)
objective.SetCoefficient(protein_bars, 2.5)
objective.SetMinimization()
solver.Add(600 * noodles + 250 * protein_bars >= 2000)
solver.Add(1.5 * noodles + 5 * protein_bars >= 16)
solver.Add(noodles >= 0)
solver.Add(protein_bars >= 0)
small_containers = solver.IntVar(5, solver.infinity(), 'small_containers')
large_containers = solver.IntVar(3, solver.infinity(), 'large_containers')
solver.Add(small_containers == 3 * large_containers)
solver.Add(small_containers + 3 * large_containers <= 100)
objective = solver.Objective()
objective.SetCoefficient(small_containers, 20.0)
objective.SetCoefficient(large_containers, 50.0)
objective.SetMaximization()
motion_activated = solver.IntVar(0, solver.infinity(), 'motion_activated')
manual = solver.IntVar(0, solver.infinity(), 'manual')
solver.Add(50 * motion_activated + 75 * manual >= 1000)
solver.Add(30 * motion_activated + 20 * manual <= 500)
solver.Add(manual <= 0.4 * (motion_activated + manual))
solver.Add(motion_activated >= 3)
objective = solver.Objective()
objective.SetCoefficient(motion_activated, 1.0)
objective.SetCoefficient(manual, 1.0)
objective.SetMinimization()
senior_accountants = solver.IntVar(0, solver.infinity(), 'senior_accountants')
junior_accountants = solver.IntVar(0, solver.infinity(), 'junior_accountants')
objective = solver.Objective()
objective.SetCoefficient(senior_accountants, 3000.0)
objective.SetCoefficient(junior_accountants, 1000.0)
objective.SetMinimization()
solver.Add(senior_accountants + junior_accountants >= 100)
solver.Add(senior_accountants >= 5)
solver.Add(senior_accountants >= junior_accountants / 3)
solver.Add(3000 * senior_accountants + 1000 * junior_accountants <= 150000)
fish = solver.IntVar(0, solver.infinity(), 'fish')
chicken = solver.IntVar(0, solver.infinity(), 'chicken')
solver.Add(10 * fish + 15 * chicken >= 130)
solver.Add(12 * fish + 8 * chicken >= 120)
solver.Add(chicken >= 2 * fish)
objective = solver.Objective()
objective.SetCoefficient(fish, 7.0)
objective.SetCoefficient(chicken, 10.0)
objective.SetMinimization()
large_pills = solver.IntVar(100, solver.infinity(), 'large_pills')
small_pills = solver.IntVar(0, solver.infinity(), 'small_pills')
solver.Add(3 * large_pills + 2 * small_pills <= 1000)
solver.Add(small_pills >= 0.6 * (large_pills + small_pills))
objective = solver.Objective()
objective.SetCoefficient(small_pills, 1.0)
objective.SetCoefficient(large_pills, 2.0)
objective.SetMinimization()
beam_bridges = solver.IntVar(0, solver.infinity(), 'beam_bridges')
truss_bridges = solver.IntVar(0, 5, 'truss_bridges')
solver.Add(30 * beam_bridges + 50 * truss_bridges <= 600)
solver.Add(5 * beam_bridges + 8 * truss_bridges <= 100)
solver.Add(beam_bridges > truss_bridges)
objective = solver.Objective()
objective.SetCoefficient(beam_bridges, 40.0)
objective.SetCoefficient(truss_bridges, 60.0)
objective.SetMaximization()
A = solver.IntVar(0, 5, 'A')
B = solver.IntVar(0, solver.infinity(), 'B')
solver.Add(30 * A + 40 * B <= 300)
solver.Add(50 * A + 30 * B <= 400)
solver.Add(B > A)
objective = solver.Objective()
objective.SetCoefficient(A, 12.0)
objective.SetCoefficient(B, 8.0)
objective.SetMaximization()
lab1 = solver.IntVar(0, solver.infinity(), 'lab1')
lab2 = solver.IntVar(0, solver.infinity(), 'lab2')
solver.Add(20 * lab1 + 30 * lab2 >= 20000)
solver.Add(30 * lab1 + 40 * lab2 >= 30000)
solver.Add(3 * lab1 + 5 * lab2 <= 1500)
objective = solver.Objective()
objective.SetCoefficient(lab1, 3.0)
objective.SetCoefficient(lab2, 5.0)
objective.SetMinimization()
throat_swabs = solver.IntVar(0, solver.infinity(), 'throat_swabs')
nasal_swabs = solver.IntVar(30, solver.infinity(), 'nasal_swabs')
solver.Add(nasal_swabs >= 30)
solver.Add(throat_swabs >= 4 * nasal_swabs)
solver.Add(5 * throat_swabs + 3 * nasal_swabs <= 20000)
objective = solver.Objective()
objective.SetCoefficient(throat_swabs, 1.0)
objective.SetCoefficient(nasal_swabs, 1.0)
objective.SetMaximization()
high_volume = solver.IntVar(0, solver.infinity(), 'high_volume')
low_volume = solver.IntVar(0, solver.infinity(), 'low_volume')
solver.Add(10000 * high_volume + 5000 * low_volume >= 150000)
solver.Add(12 * high_volume + 5 * low_volume <= 160)
solver.Add(high_volume <= 0.35 * (high_volume + low_volume))
solver.Add(low_volume >= 8)
objective = solver.Objective()
objective.SetCoefficient(high_volume, 1.0)
objective.SetCoefficient(low_volume, 1.0)
objective.SetMinimization()
x = solver.IntVar(0, solver.infinity(), 'x')
y = solver.IntVar(0, solver.infinity(), 'y')
solver.Add(2 * x + 4 * y >= 10)
solver.Add(2 * x + 1 * y >= 9)
solver.Add(4 * x + 2 * y >= 15)
solver.Add(x >= 0)
solver.Add(y >= 0)
objective = solver.Objective()
objective.SetCoefficient(x, 300.0)
objective.SetCoefficient(y, 200.0)
objective.SetMinimization()
personal_licenses = solver.IntVar(0, solver.infinity(), 'personal_licenses')
commercial_licenses = solver.IntVar(0, solver.infinity(), 'commercial_licenses')
solver.Add(personal_licenses + commercial_licenses <= 300)
solver.Add(550 * personal_licenses + 2000 * commercial_licenses <= 400000)
objective = solver.Objective()
objective.SetCoefficient(personal_licenses, 450.0)
objective.SetCoefficient(commercial_licenses, 1200.0)
objective.SetMaximization()
apartments = solver.IntVar(0, 200000, 'apartments')
townhouses = solver.IntVar(0, solver.infinity(), 'townhouses')
solver.Add(apartments + townhouses <= 600000)
solver.Add(apartments <= 200000)
solver.Add(apartments >= 0.5 * townhouses)
objective = solver.Objective()
objective.SetCoefficient(apartments, 0.10)
objective.SetCoefficient(townhouses, 0.15)
objective.SetMaximization()
taxi_rides = solver.IntVar(0, solver.infinity(), 'taxi_rides')
company_car_rides = solver.IntVar(0, solver.infinity(), 'company_car_rides')
solver.Add(taxi_rides + company_car_rides >= 500 / 2)
solver.Add(company_car_rides >= 30)
solver.Add(company_car_rides <= 0.6 * (taxi_rides + company_car_rides))
objective = solver.Objective()
objective.SetCoefficient(taxi_rides, 1.0)
objective.SetMinimization()
large_trips = solver.IntVar(0, 7, 'large_trips')
small_trips = solver.IntVar(0, solver.infinity(), 'small_trips')
solver.Add(large_trips + small_trips >= 20000 / 2000)
solver.Add(small_trips >= 0.4 * (large_trips + small_trips))
objective = solver.Objective()
objective.SetCoefficient(large_trips, 20.0)
objective.SetCoefficient(small_trips, 15.0)
objective.SetMinimization()
mix1 = solver.IntVar(0, solver.infinity(), 'mix1')
mix2 = solver.IntVar(0, solver.infinity(), 'mix2')
solver.Add(0.2 * mix1 + 0.35 * mix2 <= 20)
solver.Add(0.8 * mix1 + 0.65 * mix2 <= 50)
objective = solver.Objective()
objective.SetCoefficient(mix1, 12.0)
objective.SetCoefficient(mix2, 15.0)
objective.SetMaximization()
camel_caravans = solver.IntVar(0, solver.infinity(), 'camel_caravans')
desert_trucks = solver.IntVar(0, solver.infinity(), 'desert_trucks')
solver.Add(50 * camel_caravans + 150 * desert_trucks >= 1500)
solver.Add(camel_caravans >= desert_trucks)
objective = solver.Objective()
objective.SetCoefficient(camel_caravans, 12.0)
objective.SetCoefficient(desert_trucks, 5.0)
objective.SetMinimization()
small_shops = solver.IntVar(0, solver.infinity(), 'small_shops')
large_shops = solver.IntVar(0, solver.infinity(), 'large_shops')
solver.Add(30 * small_shops + 70 * large_shops >= 500)
solver.Add(2 * small_shops + 4 * large_shops <= 30)
objective = solver.Objective()
objective.SetCoefficient(small_shops, 1.0)
objective.SetCoefficient(large_shops, 1.0)
objective.SetMinimization()
regular_vans = solver.IntVar(0, solver.infinity(), 'regular_vans')
hybrid_vans = solver.IntVar(0, solver.infinity(), 'hybrid_vans')
solver.Add(500 * regular_vans + 300 * hybrid_vans >= 20000)
solver.Add(200 * regular_vans + 100 * hybrid_vans <= 7000)
objective = solver.Objective()
objective.SetCoefficient(regular_vans, 1.0)
objective.SetCoefficient(hybrid_vans, 1.0)
objective.SetMinimization()
x1 = solver.IntVar(0, solver.infinity(), 'x1')
x2 = solver.IntVar(0, solver.infinity(), 'x2')
solver.Add(60 * x1 + 40 * x2 >= 1000)
solver.Add(30 * x1 + 15 * x2 <= 430)
objective = solver.Objective()
objective.SetCoefficient(x1, 1.0)
objective.SetCoefficient(x2, 1.0)
objective.SetMinimization()
alpha = solver.IntVar(0, solver.infinity(), 'alpha')
beta = solver.IntVar(0, solver.infinity(), 'beta')
solver.Add(3 * alpha + 5 * beta <= 800)
solver.Add(5 * alpha + 4 * beta <= 750)
objective = solver.Objective()
objective.SetCoefficient(alpha, 8.0)
objective.SetCoefficient(beta, 10.0)
objective.SetMaximization()
blueberries = solver.IntVar(0, 300, 'blueberries')
raspberries = solver.IntVar(0, 300, 'raspberries')
solver.Add(6 * blueberries + 3 * raspberries <= 575)
solver.Add(22 * blueberries + 25 * raspberries <= 10000)
solver.Add(blueberries + raspberries <= 300)
objective = solver.Objective()
objective.SetCoefficient(blueberries, 56.0)
objective.SetCoefficient(raspberries, 75.0)
objective.SetMaximization()
vans = solver.IntVar(0, solver.infinity(), 'vans')
minibuses = solver.IntVar(0, 10, 'minibuses')
solver.Add(6 * vans + 10 * minibuses >= 150)
solver.Add(minibuses <= 10)
solver.Add(vans > minibuses)
objective = solver.Objective()
objective.SetCoefficient(vans, 7.0)
objective.SetCoefficient(minibuses, 10.0)
objective.SetMinimization()
chairs = solver.IntVar(0, solver.infinity(), 'chairs')
dressers = solver.IntVar(0, solver.infinity(), 'dressers')
solver.Add(1.4 * chairs + 1.1 * dressers <= 17)
solver.Add(2 * chairs + 3 * dressers <= 11)
objective = solver.Objective()
objective.SetCoefficient(chairs, 43.0)
objective.SetCoefficient(dressers, 52.0)
objective.SetMaximization()
scooters = solver.IntVar(0, solver.infinity(), 'scooters')
bikes = solver.IntVar(0, solver.infinity(), 'bikes')
solver.Add(2 * scooters + 4 * bikes <= 5000)
solver.Add(3 * scooters + 5 * bikes <= 6000)
objective = solver.Objective()
objective.SetCoefficient(scooters, 200.0)
objective.SetCoefficient(bikes, 300.0)
objective.SetMaximization()
manual_slicers = solver.IntVar(0, solver.infinity(), 'manual_slicers')
automatic_slicers = solver.IntVar(0, solver.infinity(), 'automatic_slicers')
solver.Add(5 * manual_slicers + 8 * automatic_slicers >= 50)
solver.Add(3 * manual_slicers + 6 * automatic_slicers <= 35)
solver.Add(manual_slicers < automatic_slicers)
objective = solver.Objective()
objective.SetCoefficient(manual_slicers, 1.0)
objective.SetCoefficient(automatic_slicers, 1.0)
objective.SetMinimization()
gummies = solver.IntVar(0, solver.infinity(), 'gummies')
pills = solver.IntVar(0, solver.infinity(), 'pills')
solver.Add(3 * gummies + 2 * pills <= 200)
solver.Add(pills >= 10)
solver.Add(gummies >= 3 * pills)
objective = solver.Objective()
objective.SetCoefficient(gummies, 4.0)
objective.SetCoefficient(pills, 5.0)
objective.SetMaximization()
palladium_heavy = solver.IntVar(0, solver.infinity(), 'palladium_heavy')
platinum_heavy = solver.IntVar(0, solver.infinity(), 'platinum_heavy')
solver.Add(15 * palladium_heavy + 20 * platinum_heavy <= 450)
solver.Add(25 * palladium_heavy + 14 * platinum_heavy <= 390)
objective = solver.Objective()
objective.SetCoefficient(palladium_heavy, 5.0)
objective.SetCoefficient(platinum_heavy, 4.0)
objective.SetMaximization()
regular = solver.IntVar(0, solver.infinity(), 'regular')
special = solver.IntVar(0, solver.infinity(), 'special')
solver.Add(2 * regular + 3 * special <= 40)
solver.Add(3 * regular + 5 * special <= 70)
objective = solver.Objective()
objective.SetCoefficient(regular, 3.0)
objective.SetCoefficient(special, 4.0)
objective.SetMaximization()
clothing_investment = solver.IntVar(0, solver.infinity(), 'clothing_investment')
tech_investment = solver.IntVar(0, 500, 'tech_investment')
solver.Add(clothing_investment >= 4 * tech_investment)
solver.Add(clothing_investment + tech_investment <= 3000)
objective = solver.Objective()
objective.SetCoefficient(clothing_investment, 0.07)
objective.SetCoefficient(tech_investment, 0.10)
objective.SetMaximization()
patches = solver.IntVar(0, 100, 'patches')
creams = solver.IntVar(0, 100, 'creams')
solver.Add(3 * patches + 5 * creams <= 400)
solver.Add(5 * patches + 6 * creams <= 530)
solver.Add(creams >= 2 * patches)
solver.Add(patches + creams <= 100)
objective = solver.Objective()
objective.SetCoefficient(patches, 3.0)
objective.SetCoefficient(creams, 2.0)
objective.SetMaximization()
premium = solver.IntVar(0, solver.infinity(), 'premium')
regular = solver.IntVar(0, solver.infinity(), 'regular')
solver.Add(premium + regular <= 200)
solver.Add(2000 * premium + 1000 * regular <= 300000)
objective = solver.Objective()
objective.SetCoefficient(premium, 500.0)
objective.SetCoefficient(regular, 300.0)
objective.SetMaximization()
math_workbooks = solver.IntVar(40, 140, 'math_workbooks')
english_workbooks = solver.IntVar(60, 170, 'english_workbooks')
solver.Add(math_workbooks >= 40)
solver.Add(english_workbooks >= 60)
solver.Add(math_workbooks <= 140)
solver.Add(english_workbooks <= 170)
solver.Add(math_workbooks + english_workbooks >= 200)
objective = solver.Objective()
objective.SetCoefficient(math_workbooks, 15.0)
objective.SetCoefficient(english_workbooks, 17.0)
objective.SetMaximization()
new_model = solver.IntVar(5, solver.infinity(), 'new_model')
old_model = solver.IntVar(0, solver.infinity(), 'old_model')
solver.Add(10 * new_model + 15 * old_model >= 200)
solver.Add(200 * new_model + 250 * old_model <= 3500)
solver.Add(old_model <= 0.35 * (new_model + old_model))
objective = solver.Objective()
objective.SetCoefficient(new_model, 1.0)
objective.SetCoefficient(old_model, 1.0)
objective.SetMinimization()
almonds = solver.IntVar(0, solver.infinity(), 'almonds')
cashows = solver.IntVar(0, solver.infinity(), 'cashews')
solver.Add(200 * almonds + 300 * cashews >= 10000)
solver.Add(20 * almonds + 25 * cashews >= 800)
solver.Add(almonds >= 2 * cashews)
objective = solver.Objective()
objective.SetCoefficient(almonds, 15.0)
objective.SetCoefficient(cashews, 12.0)
objective.SetMinimization()
liquid = solver.IntVar(0, 30, 'liquid')
foam = solver.IntVar(0, solver.infinity(), 'foam')
solver.Add(40 * liquid + 60 * foam <= 2000)
solver.Add(50 * liquid + 40 * foam <= 2100)
solver.Add(foam > liquid)
solver.Add(liquid <= 30)
objective = solver.Objective()
objective.SetCoefficient(liquid, 30.0)
objective.SetCoefficient(foam, 20.0)
objective.SetMaximization()
regular_handbags = solver.IntVar(0, 475, 'regular_handbags')
premium_handbags = solver.IntVar(0, 475, 'premium_handbags')
solver.Add(200 * regular_handbags + 447 * premium_handbags <= 250000)
solver.Add(regular_handbags + premium_handbags <= 475)
objective = solver.Objective()
objective.SetCoefficient(regular_handbags, 30.0)
objective.SetCoefficient(premium_handbags, 180.0)
objective.SetMaximization()
new_trips = solver.IntVar(0, 15, 'new_trips')
old_trips = solver.IntVar(0, solver.infinity(), 'old_trips')
solver.Add(50 * new_trips + 70 * old_trips >= 1000)
solver.Add(new_trips <= 15)
solver.Add(old_trips >= 0.4 * (new_trips + old_trips))
objective = solver.Objective()
objective.SetCoefficient(new_trips, 30.0)
objective.SetCoefficient(old_trips, 40.0)
objective.SetMinimization()
oj = solver.IntVar(3, solver.infinity(), 'oj')
aa = solver.IntVar(0, solver.infinity(), 'aa')
solver.Add(10 * oj + 12 * aa >= 582)
solver.Add(8 * oj + 6 * aa <= 300)
solver.Add(aa >= 3 * oj)
objective = solver.Objective()
objective.SetCoefficient(oj, 10.0)
objective.SetCoefficient(aa, 12.0)
objective.SetMaximization()
bikes = solver.IntVar(0, solver.infinity(), 'bikes')
scooters = solver.IntVar(0, solver.infinity(), 'scooters')
solver.Add(bikes <= 0.3 * (bikes + scooters))
solver.Add(scooters >= 20)
solver.Add(3 * bikes + 2 * scooters <= 200)
objective = solver.Objective()
objective.SetCoefficient(bikes, 8.0)
objective.SetCoefficient(scooters, 5.0)
objective.SetMaximization()
sled_dogs = solver.IntVar(0, solver.infinity(), 'sled_dogs')
trucks = solver.IntVar(0, solver.infinity(), 'trucks')
solver.Add(50 * sled_dogs + 100 * trucks <= 1000)
solver.Add(sled_dogs < trucks)
objective = solver.Objective()
objective.SetCoefficient(sled_dogs, 100.0)
objective.SetCoefficient(trucks, 300.0)
objective.SetMaximization()
cart_servers = solver.IntVar(0, solver.infinity(), 'cart_servers')
hand_servers = solver.IntVar(0, solver.infinity(), 'hand_servers')
solver.Add(70 * cart_servers + 85 * hand_servers >= 4000)
solver.Add(cart_servers >= 0.7 * (cart_servers + hand_servers))
solver.Add(hand_servers >= 3)
objective = solver.Objective()
objective.SetCoefficient(cart_servers, 5.0)
objective.SetCoefficient(hand_servers, 20.0)
objective.SetMinimization()
